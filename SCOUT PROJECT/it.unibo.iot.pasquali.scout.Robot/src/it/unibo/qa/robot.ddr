RobotSystem scout

// ------------------------------------------------------------------
//		EXPLORATION - INTERACTION
// ------------------------------------------------------------------

// From Console to Robot to start Exploration
Dispatch explore : explore
Dispatch explore : explore ( START , BOUNDS )

//START = position ( X , Y )
//BOUNDS = map ( W , H )
//The second message is used for the debug

// From Robot to Console to notify a new cell state
Event expdata : expdata ( POS , STATE )

//POS = position ( X , Y )
//STATE = clear || object
//maybe i can send only the obstacle cell

// ------------------------------------------------------------------
//		NAVIGATION - INTERACTION
// ------------------------------------------------------------------

// From Console to Robot to start the Navigation
Dispatch navigate : navigate ( PLAN , POS )

//PLAN = plan ( [ t || d || l || r ] )
//POS = position ( Xs , Ys ) 
// 
//t = forward tiled
//d = forward diagonal
//l = left (45 or 90 degrees)
//r = right


// Raised by Robot when find an unexpected
// obstacle during the navigation
Event update : update ( OBJECT , CURRENT )
//ELEMENT = potition ( X , Y )
//CURRENT = position ( X , Y )


// ------------------------------------------------------------------
//		COMMON - INTERACTION
// ------------------------------------------------------------------

// Raised by Console to abort the current command
Event abort : abort

// Raised by Robot when it ends the current command
Event end : end


// ------------------------------------------------------------------
//		LOCAL - INTERACTION
// ------------------------------------------------------------------

// Raised by Sonar when an obstacle is detected
// The user can define the sensing distance in the sensorTheory.pl

//FrontSonar
Event obstacle : obstacle
//LeftSonar
Event obstacleLeft : obstacleLeft



// ------------------------------------------------------------------
//			CONTEXTS
// ------------------------------------------------------------------

Context ctxRobot ip [ host="localhost" port=8020] -standalone 
Context ctxConsole ip [ host="localhost" port=8010]

QActor console context ctxConsole{
 	Plan init normal
		println( "NEVER HERE. I'm just a placeholder" ) 
 }

Robot scout QActor robot context ctxRobot{

// ------------------------------------------------------------------
//			NORMAL PLANS
// ------------------------------------------------------------------

	
	Plan init normal
		
		solve consult("robotTheory.pl") time(210000000) onFailSwitchTo  consultPrologFailure ;
		solve consult("navRobotTheory.pl") time(210000000) onFailSwitchTo  consultPrologFailure ;
		solve consult("expRobotTheory.pl") time(210000000) onFailSwitchTo  consultPrologFailure ;
		solve consult("talkTheory.pl") time(210000000) onFailSwitchTo  consultPrologFailure ;
		
 		println("++++++++++++++++++ robot(starts) ++++++++++++++++++");
 		switchToPlan waitConsoleCommand
 		
 	Plan waitConsoleCommand
 		
		println("++++++++++++++++++ WAIT CONSOLE COMMAND ++++++++++++++++++");
 		
 		receiveMsg time(600000000);
 		printCurrentMessage;
 		memoCurrentMessage;
 		
 		onMsg explore : explore -> switchToPlan exploration;
 		onMsg explore : explore ( START , BOUNDS ) -> switchToPlan explorationDebug;
 		onMsg navigate : navigate(PLAN, POS) -> switchToPlan navigation;
 		
 		repeatPlan 0		
 
 
 		
 	Plan exploration
 		println("")
 		
 	Plan explorationDebug
 		println("")
 
 	Plan findLeftWall
 		println("findLeftWall");
 		
// 		if(no object left)
// 		{
// 			turn left
//
//			keepMoveForward()
//
// 			if(object front)
// 				turn right
// 			if(object left)
// 				followLeftWall()
// 		}
 		
 		sense time(1000) obstacleLeft -> findLeftWall; 		
 		solve turnLeft time(100000000);
 		switchToPlan keepMoveForward
 		
 		
 	Plan keepMoveForward	 
 		
// 		while(no object front && no object left)
// 		{
// 			move forward
// 			set current cell as clear
// 		}
		
		sense time(1000) obstacleLeft -> ; 
		
 		
 	Plan followWall
 		println("followWall")
 		
 	Plan moveAway
 		println("moveAway")
 
 		
 	Plan navigation
 		[ !? planFilename(FILENAME) ]  solve loadThePlan(FILENAME) time(300000000);
  		
 		println("++++++++++++++++++ Plan Loaded ++++++++++++++++++");	
 		println(" ");
 		println(" ");
 		
 		[ !? planName(PLANNAME) ] solve showPlan(path) time(1000);
 		
 		println(" ");
 		println(" ");
 		println("++++++++++++++++++ ++++++++++++++++++ ++++++++++++++++++");	

 		solve runResumablePlan(path) time(2100000000)
 	
 	Plan abort 
 		println("Current command aborted");
 		switchToPlan waitConsoleCommand
 		
 	Plan waitAndEvaluate resumeLastPlan
 		
 		println("maybe there is an unexpected static obstacle");
 		delay time(60000);
 		println("are you there obstalce ??");
 		
 		sense time(5000) obstacle -> notifyUnexpectedObstacle	
 		
 		
 	Plan notifyUnexpectedObstacle
 		
 		println("I found an unexpected static obstacle");
 		
 		solve getCurrentPosition(CURRENT) time(2100000000) onFailSwitchTo navigationFailure;
 		solve getObstaclePosition(OBJECT) time(2100000000) onFailSwitchTo navigationFailure;
 	
 		emit update : update(OBJECT , CURRENT);
 		
 		println("Unexpected Obstacle notified, I wait the new plan");
 		
 		switchToPlan waitConsoleCommand 		
 		
 	
 	Plan notifyEndOfNavigation	
 	
 		println("è passato al piano successivo"); 	
 			
 		solve notifyEnd time(10000) onFailSwitchTo generalPrologFailure;	
 		
 		println("ma la chiama prolog fallisce per un motivo non ben definito")
		//TODO	
	
// ------------------------------------------------------------------
//	PROLOG FAILURE ERROR HANDLERS
// ------------------------------------------------------------------
		
	Plan handleTimeout
 		println("timeout!! GOODBYE")
 	
 	Plan explorationFailure            
		println("Explore FAILURE" ) 
 	
 	Plan loadMapFailure           
		println("Load Map FAILURE" ) 
		 
 	Plan findpathFailure           
		println("Find Path FAILURE" )  
 	
 	Plan navigationFailure            
		println("Navigation FAILURE" )
		
	Plan alternativeFindpathFailure            
		println("Alternative Find Path FAILURE" )  
 		
 	Plan consultPrologFailure            
		println("The consult is gone wrong, maybe there are errors in the prolog file" ) 
 		
 	Plan generalPrologFailure            
		println("Prolog goal FAILURE" ) 
}









