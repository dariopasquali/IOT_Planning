System scout

// ------------------------------------------------------------------
//		EXPLORATION - INTERACTION
// ------------------------------------------------------------------

// From Console to Robot to start Exploration
Dispatch explore : explore
Dispatch explore : explore ( START , BOUNDS )

//START = position ( X , Y )
//BOUNDS = map ( W , H )
//The second message is used for the debug

// From Robot to Console to notify a new cell state
Event expdata : expdata ( POS , STATE )

//POS = position ( X , Y )
//STATE = clear || object
//maybe i can send only the obstacle cell

// ------------------------------------------------------------------
//		NAVIGATION - INTERACTION
// ------------------------------------------------------------------

// From Console to Robot to start the Navigation
Dispatch navigate : navigate ( PLAN , POS )

//PLAN = plan ( [ t || d || l || r ] )
//POS = position ( Xs , Ys ) 
// 
//t = forward tiled
//d = forward diagonal
//l = left (45 or 90 degrees)
//r = right


// Raised by Robot when find an unexpected
// obstacle during the navigation
Event update : update ( OBJECT , CURRENT )
//ELEMENT = potition ( X , Y )
//CURRENT = position ( X , Y )


// ------------------------------------------------------------------
//		COMMON - INTERACTION
// ------------------------------------------------------------------

// Raised by Console to abort the current command
Event abort : abort

// Raised by Robot when it ends the current command
Event end : end


// ------------------------------------------------------------------
//		LOCAL - INTERACTION
// ------------------------------------------------------------------


// Raised by the GUI on user interaction
Event local_gui_command : local_gui_command(COMMAND)
 
//Button --> COMMAND
//
//Explore --> explore || explore( START , BOUNDS );
//Load Map --> loadmap ( PATH );
//Find Path –-> findpath ( START , GOAL );
//Start Navigation --> navigate;
//Abort --> abort;


// ------------------------------------------------------------------
//			CONTEXTS
// ------------------------------------------------------------------

Context ctxRobot ip [ host="localhost" port=8020] -standalone 
Context ctxConsole ip [ host="localhost" port=8010]

QActor console context ctxConsole -g cyan{
	
// ------------------------------------------------------------------
//			NORMAL PLANS
// ------------------------------------------------------------------
	
	Plan init normal
		solve consult("expConsoleTheory.pl") time(0) onFailSwitchTo  consultPrologFailure ;
		solve consult("navConsoleTheory.pl") time(0) onFailSwitchTo  consultPrologFailure ;		
		solve consult("consoleTheory.pl") time(0) onFailSwitchTo  consultPrologFailure ;
		
 		println("++++++++++++++++++ console(starts) ++++++++++++++++++");
 		switchToPlan waitGUICommand
 		
 		
 	Plan waitGUICommand
		println("++++++++++++++++++ WAIT COMMAND ++++++++++++++++++");
		
		sense time(999999999) local_gui_command -> continue;
		[ ?? tout(X,Y) ] switchToPlan handleTimeout;
		
		printCurrentEvent;
		memoCurrentEvent;
		
		onEvent local_gui_command : local_gui_command (explore) -> switchToPlan exploration;
 		onEvent local_gui_command : local_gui_command (explore(START,BOUNDS)) -> switchToPlan explorationDebug;
 		onEvent local_gui_command : local_gui_command (loadmap(PATH)) -> switchToPlan loadMap;
 		onEvent local_gui_command : local_gui_command (findpath(START,GOAL)) -> switchToPlan findPath;
 		onEvent local_gui_command : local_gui_command (navigate) -> switchToPlan navigation;
		
		repeatPlan 0
		
	Plan exploration
		println("++++++++++++++++++ EXPLORATION ++++++++++++++++++");
		
		solve showClearMap time(60000) onFailSwitchTo  explorationFailure;	
		forward robot -m explore : explore;
	
		switchToPlan waitEndOfExploration
			
	Plan explorationDebug
		println("++++++++++++++++++ EXPLORATION DEBUG ++++++++++++++++++");
			
		solve showClearMap(BOUNDS) time(60000) onFailSwitchTo  explorationFailure;		
		[?? msg(local_gui_command, "event", SENDER, none, local_gui_command (explore(START,BOUNDS)), MSGNUM)]
			 forward robot -m explore : explore(START,BOUNDS);
		
		switchToPlan waitEndOfExploration
			
	Plan waitEndOfExploration resumeLastPlan
		receiveMsg time(999999999) react event abort -> abortCommand;
		
		printCurrentMessage;
			
		onMsg expdata : expdata(POS , STATE) ->
			solve updateMap(POS , STATE) time(210000000) onFailSwitchTo explorationFailure
			
			
	Plan loadMap
		[?? msg(local_gui_command, "event", SENDER, none, local_gui_command (loadmap(PATH)), MSGNUM)]
			 solve loadMap(PATH) time(210000000) onFailSwitchTo loadMapFailure;
				
		println("++++++++++++++++++ MAP LOADED ++++++++++++++++++")
		

			
	Plan findPath
		[?? msg(local_gui_command, "event", SENDER, none, local_gui_command (findpath(START,GOAL)), MSGNUM)]
		solve searchBestPath(START,GOAL) time(210000000) onFailSwitchTo  findpathFailure;
	
		println("++++++++++++++++++ PATH FOUND ++++++++++++++++++")
	
			
	Plan navigation
		println("++++++++++++++++++ NAVIGATION ++++++++++++++++++");
		
		solve startNavigation time(60000) onFailSwitchTo  navigationFailure;
		
		switchToPlan waitEndOfNavigation
		
		
		
	Plan waitEndOfNavigation
		sense time(999999999) local_gui_command, update, end -> continue, continue, continue;
 		[ ?? tout(X,Y) ] switchToPlan handleTimeout;
 		
 		printCurrentEvent;
 		memoCurrentEvent;
 		
 		onEvent local_gui_command : local_gui_command(abort) -> switchToPlan abortCommand; 
 						
		onEvent update : update (OBJECT, CURRENT) ->
			 solve updateMapAndReplan(OBJECT , CURRENT) time(600000)
			 onFailSwitchTo  alternativeFindpathFailure;	
			 	
		onEvent end : end -> switchToPlan endOfNavigation;
		
		repeatPlan 0

	Plan endOfNavigation
	
		println("++++++++++++++++++ NAVIGATION ENDED :D ++++++++++++++++++");
		switchToPlan waitGUICommand	
	
	Plan abortCommand
		emit abort : abort;
		println("++++++++++++++++++ COMMAND ABORTED ++++++++++++++++++");
		switchToPlan waitGUICommand	

// ------------------------------------------------------------------
//	PROLOG FAILURE ERROR HANDLERS
// ------------------------------------------------------------------
		
	Plan handleTimeout
 		println("timeout!! GOODBYE")
 	
 	Plan explorationFailure            
		println("Explore FAILURE" ) 
 	
 	Plan loadMapFailure           
		println("Load Map FAILURE" ) 
		 
 	Plan findpathFailure           
		println("Find Path FAILURE" )  
 	
 	Plan navigationFailure            
		println("Navigation FAILURE" )
		
	Plan alternativeFindpathFailure            
		println("Alternative Find Path FAILURE" )  
 		
 	Plan consultPrologFailure            
		println("The consult is gone wrong, maybe there are errors in the prolog file" ) 
 		
 	Plan generalPrologFailure            
		println("Prolog goal FAILURE" ) 	
	
}


QActor robot context ctxRobot{
 	Plan init normal
		println( "NEVER HERE. I'm just a placeholder" ) 
 }








