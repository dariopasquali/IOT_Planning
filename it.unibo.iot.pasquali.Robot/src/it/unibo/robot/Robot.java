/* Generated by AN DISI Unibo */ 
package it.unibo.robot;
import java.util.ArrayList;
import java.util.List;

import it.unibo.domain.model.implmentation.Map;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.planning.astar.algo.EngineFactory;
import it.unibo.planning.astar.algo.SearchAgent;
import it.unibo.planning.astar.enums.Algo;
import it.unibo.planning.astar.enums.Direction;
import it.unibo.planning.astar.interfaces.IEngine;
import it.unibo.qactors.ActorContext;
import it.unibo.robot.planutility.PlanSaver;
public class Robot extends AbstractRobot { 
	
	private Map map;
	private ArrayList<it.unibo.planning.astar.domain.State> path;
	
	it.unibo.planning.astar.domain.State start, goal;
	private Algo algorithm;
	
	
	
	public Robot(String actorId, ActorContext myCtx, IOutputEnvView outEnvView ,it.unibo.iot.executors.baseRobot.IBaseRobot baserobot) throws Exception{
		super(actorId,myCtx,outEnvView ,baserobot );
		
	}
	public void createMap(int x, int y)
	{
		map = new Map(x,y);
	}
	
	public void setMapElements(List<String> elements)
	{
		map.addElementsFromList(elements);
	}
	
	public void setMapElements(String elements)
	{
		map.addElementsFromString(elements);
	}
	
	public void searchBestPath(int sx, int sy, int gx, int gy, String algo)
	{		
		this.algorithm = Algo.fromStringValue(algo);
		
		SearchAgent agent = new SearchAgent();
		
		it.unibo.planning.astar.domain.State start = 
				new it.unibo.planning.astar.domain.State(sx, sy, Direction.NORTH, null, 0, map.getXmax());
		
		it.unibo.planning.astar.domain.State goal = 
				new it.unibo.planning.astar.domain.State(gx, gy, Direction.NONE, null, 0, map.getXmax());
		
		long st = System.currentTimeMillis();
		
		IEngine engine = EngineFactory.getEngine(algorithm, this);
		
		println("LET'S FIND BEST PATH");
		
		path = agent.searchBestStatePath(engine,start, goal);	
		
		println("Search Time --> " + (System.currentTimeMillis() - st) +" ms");
	}
	
	public void showPathOnGui()
	{
		for(it.unibo.planning.astar.domain.State s : path)
		{
			System.out.println(s.toString());
		}
	}
	
	public void setNavigationPlan(String algo, String plan, int s, int t)
	{
		//NB: rotation step is 45 degrees
		
		this.algorithm = Algo.fromStringValue(algo);		
		
		String speed = ""+s;
		String time = ""+t;
		String diagoTime = ""+(Math.round(t*1.414));
		
		plan = plan.split("\\[")[1];
		plan = plan.split("\\]")[0];
		
		println("Salvataggio piano in corso");
		println(plan);
		println(speed);
		println(time);
		
		PlanSaver planSaver = new PlanSaver("path");
		
		planSaver.addPrint("Inizio Navigazione");
		
		String[] moves = plan.split(",");
		
		for(String m : moves)
		{
			switch(m)
			{
			case "t":
				planSaver.addForwardMove(speed, time);
				break;
				
			case "d":
				planSaver.addForwardMove(speed, diagoTime);
				break;
				
			case "l":
				planSaver.addSpinMove(speed, time, "ml");
				if(algorithm.equals(Algo.ONLY_TILED))
					planSaver.addSpinMove(speed, time, "ml");
				break;
				
			case "r":
				planSaver.addSpinMove(speed, time, "mr");
				if(algorithm.equals(Algo.ONLY_TILED))
					planSaver.addSpinMove(speed, time, "mr");
				break;
				
			case "dl":
				planSaver.addSpinMove(speed, time, "ml");
				planSaver.addSpinMove(speed, time, "ml");
				if(algorithm.equals(Algo.ONLY_TILED))
				{
					planSaver.addSpinMove(speed, time, "ml");
					planSaver.addSpinMove(speed, time, "ml");
				}
				break;
				
			case "dr":
				planSaver.addSpinMove(speed, time, "mr");
				planSaver.addSpinMove(speed, time, "mr");
				if(algorithm.equals(Algo.ONLY_TILED))
				{
					planSaver.addSpinMove(speed, time, "mr");
					planSaver.addSpinMove(speed, time, "mr");
				}
				break;
			}			
		}
		
		planSaver.addPrint("fine Navigazione");
		planSaver.addSolve("continueProgram", ""+0);
		
		println(planSaver.getPlan());
		planSaver.storePlan();
		
		println("PLAN SAVED IN path.txt");		
	}
	
	public void setPositions(int sx, int sy, int gx, int gy)
	{
		this.start =	new it.unibo.planning.astar.domain.State(sx, sy, Direction.NORTH, null, 0, map.getXmax());		
		this.goal =	new it.unibo.planning.astar.domain.State(gx, gy, Direction.NONE, null, 0, map.getXmax());
		
		println(start.toString());
		println(goal.toString());
	
	}
	
}
