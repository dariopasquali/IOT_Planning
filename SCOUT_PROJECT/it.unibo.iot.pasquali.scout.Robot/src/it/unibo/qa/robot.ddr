RobotSystem scout

// ------------------------------------------------------------------
//		EXPLORATION - INTERACTION
// ------------------------------------------------------------------

// From Console to Robot to start Exploration
Dispatch explore : explore
Dispatch exploredebug : exploredebug ( START , BOUNDS)
Dispatch explorefile : explorefile (START, FILENAME )
//START = position ( X , Y )
//BOUNDS = map ( W , H )

// From Robot to Console to notify a new cell state
Event expdata : expdata ( POS , STATE )
//POS = position ( X , Y )
//STATE = clear || object

// ------------------------------------------------------------------
//		NAVIGATION - INTERACTION
// ------------------------------------------------------------------

// From Console to Robot to start the Navigation
Dispatch navigate : navigate ( PLAN_MOVES , POS )
Dispatch navigatefile : navigatefile( PLAN_MOVES , POS , FILENAME)
//PLAN = plan ( [ t || d || l || r ] )
//POS = position ( Xs , Ys )
// 
//t = forward tiled
//d = forward diagonal
//l = left (45 or 90 degrees)
//r = right


// Raised by Robot when find an unexpected
// obstacle during the navigation
Event update : update ( OBJECT , CURRENT )
//OBJECT = position ( X , Y )
//CURRENT = position ( X , Y )


// ------------------------------------------------------------------
//		COMMON - INTERACTION
// ------------------------------------------------------------------

// Raised by Console to abort the current command
Event abort : abort

// Raised by Robot when it ends the current command
Event end : end


// ------------------------------------------------------------------
//		LOCAL - INTERACTION
// ------------------------------------------------------------------

// Raised by Sonar when an obstacle is detected

//Sonar
Event obstaclefront : obstaclefront
Event obstacleleft : obstacleleft

// ------------------------------------------------------------------
//		ROBOT GUI - INTERACTION
// ------------------------------------------------------------------

Event enableGUI : enableGUI(START, FILENAME)
// STATE = on || off

Event show : show(POS, DIR)
// POS = position(X,Y)
// DIR = n || e || w || s || ne || nw || se || sw

Event updateSimulation : updateSimulation(POSITION)

// ------------------------------------------------------------------
//		UNITY - INTERACTION
// ------------------------------------------------------------------

Event senseObstacle : senseObstacle

Event moveACK : moveACK

Event subscribeACK : subscribeACK

// ------------------------------------------------------------------
//			CONTEXTS
// ------------------------------------------------------------------

Context ctxRobot ip [ host="localhost" port=8020]

EventHandler evh for updateSimulation -print{ 
	memo currentEvent for robot;
	solve updateSimulationWorld for robot
};

Context ctxConsole ip [ host="localhost" port=8010]

QActor console context ctxConsole{
 	Plan init normal
		println( "NEVER HERE. I'm just a placeholder" ) 
 }

// ------------------------------------------------------------------
//			GUI MANAGER
// ------------------------------------------------------------------

QActor guimanager context ctxRobot -g white{
	
	Plan init normal
		println("++++++++++++++++++++++++++ guiManager(starts) ++++++++++++++++++");
		solve consult("guiTheory.pl") time(210000000) onFailSwitchTo  consultPrologFailure ;
		switchToPlan enableOrDie
		
	Plan enableOrDie
		
		[!? robotMode(gui)] actorOp initRobotGui;
		[!? robotMode(gui)] switchToPlan waitMap else endQActor "TERMINATE because robot mode = robot";	
		
		[!? robotMode(unity)] actorOp initUnity;
		[!? robotMode(unity)] switchToPlan waitMap else endQActor "TERMINATE because robot mode = robot"	
		
	
	Plan waitMap
	
		println("++++++++++++++++++++++++++ ROBOT GUI WAIT MAP ++++++++++++++++++");		
		sense time(1000000000) enableGUI -> continue;
		printCurrentEvent;
		onEvent enableGUI : enableGUI(position(X , Y), FILENAME) -> actorOp showMap(X , Y, FILENAME);
		
		//[!? robotMode(unity)] sense time(2000) subscribeACK -> continue;
		
		actorOp createActor;
		
		switchToPlan waitUpdates	
		
	Plan waitUpdates
		println("waitMove");
		sense time(1000000000) end, show, senseObstacle->  continue, continue, continue;
		//sense time(1000000000) show ->  continue;
		printCurrentEvent;
		
		onEvent senseObstacle : senseObstacle -> actorOp simulationSensing;	
		onEvent show : show(POS,DIR) -> solve updateState(POS,DIR) time(0);
		onEvent end : end -> switchToPlan ppp;
		
		
		repeatPlan
		
	Plan ppp
		actorOp simulationSensing;
		println("FATTOOOOOO");
		switchToPlan waitMap 
		
		
		
	Plan consultPrologFailure            
		println("GUI ----------------------------- consult gone wrong" )
}

Robot mockScout QActor robot context ctxRobot{

// ------------------------------------------------------------------
//			NORMAL PLANS
// ------------------------------------------------------------------

	
	Plan init normal
		
		println("load theories");
		
		solve consult("robotTheory.pl") time(210000000) onFailSwitchTo  consultPrologFailure ;
		solve consult("navRobotTheory.pl") time(210000000) onFailSwitchTo  consultPrologFailure ;
		solve consult("exploreRobotTheory.pl") time(210000000) onFailSwitchTo  consultPrologFailure ;
		solve consult("talkTheory.pl") time(210000000) onFailSwitchTo  consultPrologFailure ;
		
 		println("++++++++++++++++++ robot(starts) ++++++++++++++++++");
 		
 		switchToPlan waitConsoleCommand
 		
 	Plan waitConsoleCommand
 		
		println("++++++++++++++++++ WAIT CONSOLE COMMAND ++++++++++++++++++");
 		
 		receiveMsg time(600000000);
 		printCurrentMessage;
 		memoCurrentMessage;
 		
 		onMsg explore : explore -> switchToPlan exploration;
 		onMsg exploredebug : exploredebug ( START , BOUNDS) -> switchToPlan explorationDebug;
 		onMsg explorefile : explorefile (START, FILENAME) -> switchToPlan explorationFile;
 		onMsg navigate : navigate(PLAN_MOVES, POS) -> switchToPlan navigation;
 		onMsg navigatefile : navigatefile( PLAN_MOVES , POS , FILENAME) -> switchToPlan navigationFile;
 		
 		repeatPlan 0		
 
 // EXPLORATION PLANS----------------------------------------------
 		
 	Plan exploration
 		println("")
 		
 
 // DEBUG EXPLORATION PLANS -----------------------------------		
 	
 	Plan explorationFile
 		println("Let's explore a file!!"); 	
 		
 		solve initialConfigExpRobot time(0);
 		
 		[!? msg(_, _, SENDER, X, explorefile(START, FILENAME), _)]
 								emit enableGUI : enableGUI(START, FILENAME);
 								
 		delay time(2000);
 			
 		[?? msg(_, _, SENDER, X, explorefile(START, FILENAME), _)]
 								 solve initExploreFile(START, FILENAME) time(0)
 								 react event abort -> abort;
 								 
 		emit end : end;
 		println("Exploration Done ****************************");
 		resumeLastPlan
 	
 	Plan explorationDebug
 		println("Let's explore!!");
 		[?? msg(_, _, SENDER, X, explore(START,BOUNDS), _)]
 			 					 solve initExploreMap(START, BOUNDS) time(0)
 			 					 react event abort -> abort;
 		
 		emit end : end;
 		println("Exploration Done ****************************");
 		resumeLastPlan
 		
 		
 		
 
 // NAVIGATION PLANS ----------------------------------------------------
 		
 	Plan navigation
 		println("I Received some navigation data");
 		
 		solve initialConfigNavRobot time(0);
 		
 		[?? msg(_, _, SENDER, X, navigate(PLAN_MOVES, POS), MSGNUM)] 
 			solve loadNavigationData(PLAN_MOVES, POS) time (100000) onFailSwitchTo loadMapFailure;
 		
 		switchToPlan startNavigation 	
 	
 	Plan navigationFile
 		println("I Received some navigation data and a filename");
 		
 		solve initialConfigNavRobot time(0);
 		
 		[!? msg(_, _, SENDER, X, navigatefile( PLAN_MOVES , POS , FILENAME), MSGNUM)]
 								emit enableGUI : enableGUI(POS, FILENAME);
 								
 		
 		[?? msg(_, _, SENDER, X, navigatefile( PLAN_MOVES , POS , FILENAME), MSGNUM)] 
 			solve loadNavigationData(PLAN_MOVES, POS, FILENAME) time (100000) onFailSwitchTo loadMapFailure;
 		
 		[!? planExecutionMode(pInter)] switchToPlan startNavigation;
 		[!? planExecutionMode(executor)] switchToPlan executeNavigationPlan 	
 		
 	Plan startNavigation
 	
 		[ !? planName(PLANNAME) ] demo myClearPlan(PLANNAME);
 		[ !? planFilename(FILENAME) ]  demo loadThePlan(FILENAME);
  		
 		println("++++++++++++++++++ Plan Loaded ++++++++++++++++++");	
 		println(" ");
 		println(" ");
 		
 		[ !? planName(PLANNAME) ] demo showPlan(PLANNAME);
 		
 		println(" ");
 		println(" ");
 		println("++++++++++++++++++ ++++++++++++++++++ ++++++++++++++++++");	

		[ !? planName(PLANNAME) ] demo myRunPlan(PLANNAME)

 	
 	Plan executeNavigationPlan
 	
 		println("execute the plan AHAHAHAHA");
 		solve javaPlanExecution time(1000000000); 		
 		switchToPlan notifyEndOfNavigation
 	
 	Plan waitAndEvaluate resumeLastPlan
 		
 		println("proviamo a fare roba");
 		
 		solve robaAcaso time(1000000000);
 		actorOp stampaRoba;
 		
 		println("maybe there is an unexpected static obstacle");
 		delay time(6000); 		
 		println("are you there obstacle ??");
 		
 		sense time(5000) obstaclefront -> notifyUnexpectedObstacle	
 		
 		
 	Plan notifyUnexpectedObstacle
 		
 		println("I found an unexpected static obstacle"); 		
  		solve robaAcaso time(1000000000);		
 		println("Unexpected Obstacle notified, I wait the new plan");
 		
 		switchToPlan waitConsoleCommand 		
 		
 	
 	Plan notifyEndOfNavigation	
 		 		
 		actorOp stampaRoba;
 		
 		println("notify End");  		
 		delay time(400);	 			
 		emit end : end; 		
 		switchToPlan waitConsoleCommand
 	
 	Plan waitReplan
 		
 		println("++++++++++++++++++ WAIT ALTERNATIVE PLAN ++++++++++++++++++");
 		
 		receiveMsg time(600000000);
 		printCurrentMessage;
 		memoCurrentMessage;
 		
 		//onMsg navigate : navigate(PLAN_MOVES, POS) -> switchToPlan navigationReplan;
 		onMsg navigatefile : navigatefile( PLAN_MOVES , POS , FILENAME) -> switchToPlan navigationFileReplan
 	
 	Plan navigationFileReplan
 		
 		println("I received the alternative plan");
 		
 		solve initialConfigNavRobot time(0);
 		
 		println("NavigationFileReplan ---> sono arrivato dopo la SOLVE!!!!!!!!!!");
 		
 		[?? msg(_, _, SENDER, X, navigatefile( PLAN_MOVES , POS , FILENAME), MSGNUM)] 
 			solve loadNavigationData(PLAN_MOVES, POS, FILENAME) time (100000) onFailSwitchTo loadMapFailure;
 		
 		switchToPlan startNavigation 
 		
 		
 	Plan simulatedWorldChanged resumeLastPlan
 		println("******************** Simulated World Changed ****************************")
 	
 	Plan abort 
 		println("Current command aborted");
 		switchToPlan waitConsoleCommand
	
// ------------------------------------------------------------------
//	PROLOG FAILURE ERROR HANDLERS
// ------------------------------------------------------------------
		
	Plan handleTimeout
 		println("timeout!! GOODBYE")
 	
 	Plan explorationFailure            
		println("Explore FAILURE" ) 
 	
 	Plan loadMapFailure           
		println("Load Map FAILURE" ) 
		 
 	Plan findpathFailure           
		println("Find Path FAILURE" )  
 	
 	Plan navigationFailure            
		println("Navigation FAILURE" )
		
	Plan alternativeFindpathFailure            
		println("Alternative Find Path FAILURE" )  
 		
 	Plan consultPrologFailure            
		println("The consult is gone wrong, maybe there are errors in the prolog file" ) 
 		
 	Plan generalPrologFailure            
		println("Prolog goal FAILURE" ) 
}









