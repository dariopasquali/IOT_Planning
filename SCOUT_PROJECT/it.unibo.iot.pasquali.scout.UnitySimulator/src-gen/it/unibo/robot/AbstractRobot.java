/* Generated by AN DISI Unibo */ 
package it.unibo.robot;
import alice.tuprolog.SolveInfo;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.QActorContext;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.ActionReceiveTimed;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.iot.configurator.Configurator;
import it.unibo.iot.executors.baseRobot.IBaseRobot; 
import it.unibo.iot.models.sensorData.distance.IDistanceSensorData;
import it.unibo.iot.models.sensorData.impact.IImpactSensorData;
import it.unibo.iot.models.sensorData.line.ILineSensorData;
import it.unibo.iot.models.sensorData.magnetometer.IMagnetometerSensorData;
import it.unibo.iot.sensors.ISensor; 
import it.unibo.iot.sensors.ISensorObserver;
import it.unibo.iot.sensors.distanceSensor.DistanceSensor;
import it.unibo.iot.sensors.impactSensor.ImpactSensor;
import it.unibo.iot.sensors.lineSensor.LineSensor;
import it.unibo.iot.sensors.magnetometerSensor.MagnetometerSensor;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.QActorMessage;
import it.unibo.qactors.QActorUtils;

import it.unibo.baseEnv.basicFrame.EnvFrame;
import alice.tuprolog.SolveInfo;
import it.unibo.is.interfaces.IActivity;
import it.unibo.is.interfaces.IIntent;

class QaRobotActor extends it.unibo.qactor.robot.RobotActor{
	public QaRobotActor(
		String name, QActorContext ctx, String worldTheoryPath,
			IOutputEnvView outEnvView, String baserobot, String defaultPlan )  throws Exception{
		super(name, ctx, "./srcMore/it/unibo/robot/plans.txt", worldTheoryPath,
		outEnvView, it.unibo.qactor.robot.RobotSysKb.setRobotBase(ctx, baserobot) , defaultPlan);
	}
}

public class AbstractRobot extends QaRobotActor implements IActivity{ 
protected AsynchActionResult aar = null;
protected boolean actionResult = true;
protected alice.tuprolog.SolveInfo sol;
//protected IMsgQueue mysupport ;  //defined in QActor
protected String planFilePath    = null;
protected String terminationEvId = "default";
protected String parg="";
protected boolean bres=false;
protected IActorAction  action;

		protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
			EnvFrame env = new EnvFrame( "Env_robot", java.awt.Color.white  , java.awt.Color.black );
			env.init();
			env.setSize(800,400);
			IOutputEnvView newOutEnvView = ((EnvFrame) env).getOutputEnvView();
			return newOutEnvView;
		}


	public AbstractRobot(String actorId, QActorContext myCtx, IOutputEnvView outEnvView ,String baserobot)  throws Exception{
		super(actorId, myCtx,  
		"./srcMore/it/unibo/robot/WorldTheory.pl",
		setTheEnv( outEnvView ) ,baserobot , "init");		
		addInputPanel(80);
		addCmdPanels();	
		this.planFilePath = "./srcMore/it/unibo/robot/plans.txt";
		//Plan interpretation is done in Prolog
		//if(planFilePath != null) planUtils.buildPlanTable(planFilePath);
 	}
protected void addInputPanel(int size){
	((EnvFrame) env).addInputPanel(size);			
}
protected void addCmdPanels(){
	((EnvFrame) env).addCmdPanel("input", new String[]{"INPUT"}, this);
	((EnvFrame) env).addCmdPanel("alarm", new String[]{"FIRE"}, this);
	((EnvFrame) env).addCmdPanel("help",  new String[]{"HELP"}, this);				
}
	@Override
	protected void doJob() throws Exception {
		String name  = getName().replace("_ctrl", "");
		mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
 		initSensorSystem();
		boolean res = init();
		//println(getName() + " doJob " + res );
		QActorContext.terminateQActorSystem(this);
	} 
	/* 
	* ------------------------------------------------------------
	* PLANS
	* ------------------------------------------------------------
	*/
    public boolean init() throws Exception{	//public to allow reflection
    try{
    	int nPlanIter = 0;
    	//curPlanInExec =  "init";
    	boolean returnValue = suspendWork;		//MARCHH2017
    while(true){
    	curPlanInExec =  "init";	//within while since it can be lost by switchlan
    	nPlanIter++;
    		parg = "consult(\"navRobotTheory.pl\")";
    		//REGENERATE AKKA
    		aar = solveGoalReactive(parg,210000000,"","");
    		//println(getName() + " plan " + curPlanInExec  +  " interrupted=" + aar.getInterrupted() + " action goon="+aar.getGoon());
    		if( aar.getInterrupted() ){
    			curPlanInExec   = "init";
    			if( aar.getTimeRemained() <= 0 ) addRule("tout(solvegoal,"+getName()+")");
    			if( ! aar.getGoon() ) break;
    		} 			
    		temporaryStr = "\"robot init\"";
    		println( temporaryStr );  
    		if( ! planUtils.switchToPlan("eventMainLoop").getGoon() ) break;
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=init WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean startNavigation() throws Exception{	//public to allow reflection
    try{
    	int nPlanIter = 0;
    	//curPlanInExec =  "startNavigation";
    	boolean returnValue = suspendWork;		//MARCHH2017
    while(true){
    	curPlanInExec =  "startNavigation";	//within while since it can be lost by switchlan
    	nPlanIter++;
    		//delay
    		aar = delayReactive(5000,"" , "");
    		if( aar.getInterrupted() ) curPlanInExec   = "startNavigation";
    		if( ! aar.getGoon() ) break;
    		parg = "loadThePlan(\"piano.txt\")";
    		//REGENERATE AKKA
    		aar = solveGoalReactive(parg,100000,"","");
    		//println(getName() + " plan " + curPlanInExec  +  " interrupted=" + aar.getInterrupted() + " action goon="+aar.getGoon());
    		if( aar.getInterrupted() ){
    			curPlanInExec   = "startNavigation";
    			if( aar.getTimeRemained() <= 0 ) addRule("tout(solvegoal,"+getName()+")");
    			if( ! aar.getGoon() ) break;
    		} 			
    		temporaryStr = "\"++++++++++++++++++ Plan Loaded ++++++++++++++++++\"";
    		println( temporaryStr );  
    		temporaryStr = "\" \"";
    		println( temporaryStr );  
    		temporaryStr = "\" \"";
    		println( temporaryStr );  
    		parg = "showPlan(piano)";
    		//REGENERATE AKKA
    		aar = solveGoalReactive(parg,10000,"","");
    		//println(getName() + " plan " + curPlanInExec  +  " interrupted=" + aar.getInterrupted() + " action goon="+aar.getGoon());
    		if( aar.getInterrupted() ){
    			curPlanInExec   = "startNavigation";
    			if( aar.getTimeRemained() <= 0 ) addRule("tout(solvegoal,"+getName()+")");
    			if( ! aar.getGoon() ) break;
    		} 			
    		temporaryStr = "\" \"";
    		println( temporaryStr );  
    		temporaryStr = "\" \"";
    		println( temporaryStr );  
    		temporaryStr = "\"++++++++++++++++++ ++++++++++++++++++ ++++++++++++++++++\"";
    		println( temporaryStr );  
    		parg = "myRunPlan(piano)";
    		//REGENERATE AKKA
    		aar = solveGoalReactive(parg,10000,"","");
    		//println(getName() + " plan " + curPlanInExec  +  " interrupted=" + aar.getInterrupted() + " action goon="+aar.getGoon());
    		if( aar.getInterrupted() ){
    			curPlanInExec   = "startNavigation";
    			if( aar.getTimeRemained() <= 0 ) addRule("tout(solvegoal,"+getName()+")");
    			if( ! aar.getGoon() ) break;
    		} 			
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=startNavigation WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean waitAndEvaluate() throws Exception{	//public to allow reflection
    try{
    	int nPlanIter = 0;
    	//curPlanInExec =  "waitAndEvaluate";
    	boolean returnValue = suspendWork;		//MARCHH2017
    while(true){
    	curPlanInExec =  "waitAndEvaluate";	//within while since it can be lost by switchlan
    	nPlanIter++;
    		temporaryStr = "\"ho trovato un ostacolo\"";
    		println( temporaryStr );  
    		temporaryStr = "\"aspettiamo e vediamo che succede\"";
    		println( temporaryStr );  
    		//delay
    		aar = delayReactive(5000,"" , "");
    		if( aar.getInterrupted() ) curPlanInExec   = "waitAndEvaluate";
    		if( ! aar.getGoon() ) break;
    		//senseEvent
    		aar = planUtils.senseEvents( 5000,"obstaclefront","endTheSystem",
    		"" , "",ActionExecMode.synch );
    		if( ! aar.getGoon() || aar.getTimeRemained() <= 0 ){
    			//println("			WARNING: sense timeout");
    			addRule("tout(senseevent,"+getName()+")");
    		}
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=waitAndEvaluate WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean eventMainLoop() throws Exception{	//public to allow reflection
    try{
    	int nPlanIter = 0;
    	//curPlanInExec =  "eventMainLoop";
    	boolean returnValue = suspendWork;		//MARCHH2017
    while(true){
    	curPlanInExec =  "eventMainLoop";	//within while since it can be lost by switchlan
    	nPlanIter++;
    		//delay
    		aar = delayReactive(5000,"" , "");
    		if( aar.getInterrupted() ) curPlanInExec   = "eventMainLoop";
    		if( ! aar.getGoon() ) break;
    		temporaryStr = QActorUtils.unifyMsgContent(pengine, "senseObstacle","senseObstacle", guardVars ).toString();
    		emit( "senseObstacle", temporaryStr );
    		temporaryStr = "\"event sent\"";
    		println( temporaryStr );  
    		//senseEvent
    		aar = planUtils.senseEvents( 5000,"obstaclefront","stampa",
    		"" , "",ActionExecMode.synch );
    		if( ! aar.getGoon() || aar.getTimeRemained() <= 0 ){
    			//println("			WARNING: sense timeout");
    			addRule("tout(senseevent,"+getName()+")");
    		}
    		printCurrentEvent(false);
    		//delay
    		aar = delayReactive(6000,"" , "");
    		if( aar.getInterrupted() ) curPlanInExec   = "eventMainLoop";
    		if( ! aar.getGoon() ) break;
    		temporaryStr = QActorUtils.unifyMsgContent(pengine, "senseObstacle","senseObstacle", guardVars ).toString();
    		emit( "senseObstacle", temporaryStr );
    		temporaryStr = "\"event sent\"";
    		println( temporaryStr );  
    		//senseEvent
    		aar = planUtils.senseEvents( 5000,"obstaclefront","stampa",
    		"" , "",ActionExecMode.synch );
    		if( ! aar.getGoon() || aar.getTimeRemained() <= 0 ){
    			//println("			WARNING: sense timeout");
    			addRule("tout(senseevent,"+getName()+")");
    		}
    		printCurrentEvent(false);
    		if( planUtils.repeatPlan(nPlanIter,10).getGoon() ) continue;
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=eventMainLoop WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean stampa() throws Exception{	//public to allow reflection
    try{
    	int nPlanIter = 0;
    	//curPlanInExec =  "stampa";
    	boolean returnValue = suspendWork;		//MARCHH2017
    while(true){
    	curPlanInExec =  "stampa";	//within while since it can be lost by switchlan
    	nPlanIter++;
    		temporaryStr = "\"proviamo a stampare\"";
    		println( temporaryStr );  
    		parg = "actorOp(stampaRoba)";
    		aar = solveGoalReactive(parg,3600000,"","");
    		//println(getName() + " plan " + curPlanInExec  +  " interrupted=" + aar.getInterrupted() + " action goon="+aar.getGoon());
    		if( aar.getInterrupted() ){
    			curPlanInExec   = "stampa";
    			if( aar.getTimeRemained() <= 0 ) addRule("tout(actorOp,"+getName()+")");
    			if( ! aar.getGoon() ) break;
    		} 			
    		//QActorUtils.solveGoal(parg,pengine );
    		returnValue = continueWork;  
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=stampa WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    public boolean endTheSystem() throws Exception{	//public to allow reflection
    try{
    	int nPlanIter = 0;
    	//curPlanInExec =  "endTheSystem";
    	boolean returnValue = suspendWork;		//MARCHH2017
    while(true){
    	curPlanInExec =  "endTheSystem";	//within while since it can be lost by switchlan
    	nPlanIter++;
    		temporaryStr = "\"L'ostacolo è ancora li, vaffanculo!\"";
    		println( temporaryStr );  
    break;
    }//while
    return returnValue;
    }catch(Exception e){
       //println( getName() + " plan=endTheSystem WARNING:" + e.getMessage() );
       QActorContext.terminateQActorSystem(this); 
       return false;  
    }
    }
    /* 
    * ------------------------------------------------------------
    * SENSORS
    * ------------------------------------------------------------
    */
    protected void initSensorSystem(){		
    	try {
    		String goal = "consult( \"./src/it/unibo/robot/sensorTheory.pl\" )";
    		SolveInfo sol = QActorUtils.solveGoal( goal ,pengine );
    		if( ! sol.isSuccess() ){
    			//println( "avatar initSensorSystem attempt to load sensorTheory "  );
    			goal = "consult( \"./sensorTheory.pl\" )";
    			QActorUtils.solveGoal( pengine, goal  );
    			//println( "avatar initSensorSystem= "  +  aar.getResult() );
    		}
    		addSensorObservers();
    	} catch (Exception e) {
    		e.printStackTrace();
    	}
    }
    /*
    //COMPONENTS
     RobotComponent motorleft 
     RobotComponent motorright 
    sensor distFrontMock simulated debug=0   
    sensor distLeftMock simulated debug=0   
    Composed component motors
    */
    protected void addSensorObservers(){
    	for (ISensor<?> sensor : Configurator.getInstance().getSensors()) {
    		//println( "robot sensor= "  + sensor.getDefStringRep() );
    		//println( "robot sensor class= "  + sensor.getClass().getName() );
        	if( sensor instanceof DistanceSensor){
        		DistanceSensor sensorDistance  = (DistanceSensor) sensor;
        		ISensorObserver<IDistanceSensorData> obs = new SensorObserver<IDistanceSensorData>(this,outEnvView);
        //		println( "avatar add observer to  "  + sensorDistance.getDefStringRep() );
        		sensorDistance.addObserver(  obs  ) ;
        	}
        	if( sensor instanceof LineSensor){
        		LineSensor sensorLine = (LineSensor) sensor;
         		ISensorObserver<ILineSensorData> obs = new SensorObserver<ILineSensorData>(this,outEnvView);
        //		println( "avatar add observer to  "  + sensorLine.getDefStringRep() );
        		sensorLine.addObserver(  obs  ) ;
        	}
         	if( sensor instanceof MagnetometerSensor){
        		MagnetometerSensor sensorMagneto = (MagnetometerSensor) sensor;
         		ISensorObserver<IMagnetometerSensorData> obs = new SensorObserver<IMagnetometerSensorData>(this,outEnvView);
        //		println( "avatar add observer to  "  + sensorMagneto.getDefStringRep() );
        		sensorMagneto.addObserver(  obs  ) ;
        	}
    		if( sensor instanceof ImpactSensor){
    			ImpactSensor sensorImpact = (ImpactSensor) sensor;
    			ISensorObserver<IImpactSensorData> obs = new SensorObserver<IImpactSensorData>(this,outEnvView);
    	//		println( "avatar add observer to  "  + sensorMagneto.getDefStringRep() );
    			sensorImpact.addObserver(  obs  ) ;
    		}
    	}		
    }	
    
 
	/* 
	* ------------------------------------------------------------
	* APPLICATION ACTIONS
	* ------------------------------------------------------------
	*/
	/* 
	* ------------------------------------------------------------
	* QUEUE  
	* ------------------------------------------------------------
	*/
	    protected void getMsgFromInputQueue(){
//	    	println( " %%%% getMsgFromInputQueue" ); 
	    	QActorMessage msg = mysupport.getMsgFromQueue(); //blocking
//	    	println( " %%%% getMsgFromInputQueue continues with " + msg );
	    	this.currentMessage = msg;
	    }
	/* 
	* ------------------------------------------------------------
	* IACTIVITY (aactor with GUI)
	* ------------------------------------------------------------
	*/
	private String[] actions = new String[]{
	    	"println( STRING | TERM )", 
	    	"play('./audio/music_interlude20.wav'),20000,'alarm,obstacle', 'handleAlarm,handleObstacle'",
	"emit(EVID,EVCONTENT)  ",
	"move(MOVE,DURATION,ANGLE)  with MOVE=mf|mb|ml|mr|ms",
	"forward( DEST, MSGID, MSGCONTENTTERM)"
	    };
	    protected void doHelp(){
			println("  GOAL ");
			println("[ GUARD ], ACTION  ");
			println("[ GUARD ], ACTION, DURATION ");
			println("[ GUARD ], ACTION, DURATION, ENDEVENT");
			println("[ GUARD ], ACTION, DURATION, EVENTS, PLANS");
			println("Actions:");
			for( int i=0; i<actions.length; i++){
				println(" " + actions[i] );
			}
	    }
	@Override
	public void execAction(String cmd) {
		if( cmd.equals("HELP") ){
			doHelp();
			return;
		}
		if( cmd.equals("FIRE") ){
			emit("alarm", "alarm(fire)");
			return;
		}
		String input = env.readln();
		//input = "\""+input+"\"";
		input = it.unibo.qactors.web.GuiUiKb.buildCorrectPrologString(input);
		//println("input=" + input);
		try {
			Term.createTerm(input);
 			String eventMsg=it.unibo.qactors.web.QActorHttpServer.inputToEventMsg(input);
			//println("QActor eventMsg " + eventMsg);
			emit("local_"+it.unibo.qactors.web.GuiUiKb.inputCmd, eventMsg);
  		} catch (Exception e) {
	 		println("QActor input error " + e.getMessage());
		}
	}
 	
	@Override
	public void execAction() {}
	@Override
	public void execAction(IIntent input) {}
	@Override
	public String execActionWithAnswer(String cmd) {return null;}
  }

