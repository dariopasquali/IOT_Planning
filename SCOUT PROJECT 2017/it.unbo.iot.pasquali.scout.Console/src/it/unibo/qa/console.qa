System scout

// ------------------------------------------------------------------
//		EXPLORATION - INTERACTION
// ------------------------------------------------------------------

// From Console to Robot to start Exploration
Dispatch explore : explore
Dispatch exploredebug : exploredebug ( START , BOUNDS )
Dispatch explorefile : explorefile (START , FILENAME )

//START = position ( X , Y )
//BOUNDS = map ( W , H )
//TYPE = java || qa
//The second message is used for the debug

// From Robot to Console to notify a new cell state
Event expdata : expdata ( POS , STATE )

//POS = position ( X , Y )
//STATE = clear || object
//maybe i can send only the obstacle cell

// ------------------------------------------------------------------
//		NAVIGATION - INTERACTION
// ------------------------------------------------------------------

// From Console to Robot to start the Navigation
Dispatch navigate : navigate ( PLAN , POS )

//PLAN = plan ( [ t || d || l || r ] )
//POS = position ( Xs , Ys ) 
// 
//t = forward tiled
//d = forward diagonal
//l = left (45 or 90 degrees)
//r = right


// Raised by Robot when find an unexpected
// obstacle during the navigation
Event update : update ( OBJECT , CURRENT )
//ELEMENT = potition ( X , Y )
//CURRENT = position ( X , Y )


// ------------------------------------------------------------------
//		COMMON - INTERACTION
// ------------------------------------------------------------------

// Raised by Console to abort the current command
Event abort : abort

// Raised by Robot when it ends the current command
Event end : end


// ------------------------------------------------------------------
//		LOCAL - INTERACTION
// ------------------------------------------------------------------


// Raised by the GUI on user interaction
Event local_gui_command : local_gui_command(COMMAND)
 
//Button --> COMMAND
//
//Load Exp Map --> loadexpmap(FILEPATH);
//Explore --> explore || explore( START , BOUNDS );
//Load Map --> loadmap ( PATH );
//Find Path â€“-> findpath ( START , GOAL );
//Start Navigation --> navigate;
//Abort --> abort;


// ------------------------------------------------------------------
//			CONTEXTS
// ------------------------------------------------------------------

Context ctxRobot ip [ host="localhost" port=8020]
Context ctxConsole ip [ host="localhost" port=8010]

QActor console context ctxConsole{
	
// ------------------------------------------------------------------
//			NORMAL PLANS
// ------------------------------------------------------------------
	
	Plan init normal
		solve consult("expConsoleTheory.pl") time(0) onFailSwitchTo  consultPrologFailure ;
		solve consult("navConsoleTheory.pl") time(0) onFailSwitchTo  consultPrologFailure ;		
		solve consult("consoleTheory.pl") time(0) onFailSwitchTo  consultPrologFailure ;
		
 		println("++++++++++++++++++ console(starts) ++++++++++++++++++");
 		switchToPlan waitGUICommand
 		
 		
 	Plan waitGUICommand
		println("++++++++++++++++++ WAIT COMMAND ++++++++++++++++++");
		
		sense time(999999999) local_gui_command -> continue;
		//[ ?? tout(X,Y) ] switchToPlan handleTimeout;
		
		printCurrentEvent;
		memoCurrentEvent;
		
		onEvent local_gui_command : local_gui_command (loadexpmap(PATH)) -> switchToPlan loadExpMap;
		onEvent local_gui_command : local_gui_command (explore) -> switchToPlan exploration;
 		onEvent local_gui_command : local_gui_command (explore(FILENAME, START, BOUNDS)) -> switchToPlan explorationDebug;
 		onEvent local_gui_command : local_gui_command (loadmap(PATH)) -> switchToPlan loadMap;
 		onEvent local_gui_command : local_gui_command (findpath(START,GOAL)) -> switchToPlan findPath;
 		onEvent local_gui_command : local_gui_command (navigate) -> switchToPlan navigation;
 		onEvent local_gui_command : local_gui_command (clear) -> switchToPlan clearGUI;
		
		repeatPlan 0
		
	Plan loadExpMap
		[?? msg(local_gui_command, "event", SENDER, none, local_gui_command (loadexpmap(PATH)), MSGNUM)]
			 solve loadMap(PATH, exploration) time(210000000) onFailSwitchTo loadMapFailure;
				
		println("++++++++++++++++++ EXPLORATION MAP LOADED ++++++++++++++++++");
		
		resumeLastPlan
	
	
	Plan exploration
		println("++++++++++++++++++ EXPLORATION ++++++++++++++++++");
		
		solve showClearMap time(60000) onFailSwitchTo  explorationFailure;	
		forward robot -m explore : explore;
	
		switchToPlan waitEndOfExploration
			
	Plan explorationDebug
		println("++++++++++++++++++ EXPLORATION DEBUG ++++++++++++++++++");
		
			
		[!? msg(local_gui_command, "event", SENDER, none, local_gui_command (explore(START,BOUNDS)), MSGNUM)]
			solve showClearMap(BOUNDS) time(60000) onFailSwitchTo  explorationFailure;	
		
		println("mappa pulita");
			
		[?? msg(local_gui_command, "event", SENDER, none, local_gui_command (explore(FILENAME,START,BOUNDS)), MSGNUM)]
//			 forward robot -m explorefile : explorefile(START,FILENAME);
			 forward robot -m exploredebug : exploredebug(START,BOUNDS);				 
		
		
		switchToPlan waitEndOfExploration
			
	Plan waitEndOfExploration resumeLastPlan
		sense time(999999999) local_gui_command, expdata, end -> continue, continue, continue;
		
		memoCurrentEvent;
		printCurrentEvent;
		
		onEvent expdata : expdata(POS , STATE) ->
			solve updateMap(POS , STATE) time(210000000) onFailSwitchTo explorationFailure;
			
		onEvent local_gui_command : local_gui_command(abort) ->	switchToPlan abortCommand;
		
		onEvent end : end -> switchToPlan endOfExploration;			
			
		repeatPlan 0
			
			
	Plan endOfExploration
		println("Exploration ENDED");
		println("Please Save the map, or clear and repeat");
		
		switchToPlan waitGUICommand
			
// --------------------- NAVIGATION --------------------------------

			
	Plan loadMap resumeLastPlan
		[?? msg(local_gui_command, "event", SENDER, none, local_gui_command (loadmap(PATH)), MSGNUM)]
			 solve loadMap(PATH, navigation) time(210000000) onFailSwitchTo loadMapFailure;
				
		println("++++++++++++++++++ MAP LOADED ++++++++++++++++++")
		

			
	Plan findPath resumeLastPlan
	
		[?? msg(local_gui_command, "event", SENDER, none, local_gui_command (findpath(START,GOAL)), MSGNUM)]
		solve searchBestPath(START,GOAL) time(210000000) onFailSwitchTo  findpathFailure;
	
		println("++++++++++++++++++ PATH FOUND ++++++++++++++++++")
	
			
	Plan navigation
		println("++++++++++++++++++ NAVIGATION ++++++++++++++++++");
		
		solve startNavigation time(60000) onFailSwitchTo  navigationFailure;
		
		switchToPlan waitEndOfNavigation
		
		
		
	Plan waitEndOfNavigation
		sense time(999999999) local_gui_command, update, end -> continue, continue, continue;
 		
 		printCurrentEvent;
 		memoCurrentEvent;
 		
 		onEvent local_gui_command : local_gui_command(abort) -> switchToPlan abortCommand; 
 						
		onEvent update : update (OBJECT, CURRENT) ->
			 solve updateMapAndReplan(OBJECT , CURRENT) time(600000)
			 onFailSwitchTo  alternativeFindpathFailure;	
			 	
		onEvent end : end -> switchToPlan endOfNavigation;
		
		repeatPlan 0

	Plan endOfNavigation
	
		println("++++++++++++++++++ NAVIGATION ENDED :D ++++++++++++++++++");
		switchToPlan waitGUICommand	
	
// COMMON -----------------------------------------------------------------------------	
	
	Plan abortCommand
		emit abort : abort;
		println("++++++++++++++++++ COMMAND ABORTED ++++++++++++++++++");
		switchToPlan waitGUICommand	
		
	Plan clearGUI resumeLastPlan
		solve clearGUI time(10000);
		println("map cleared")

// ------------------------------------------------------------------
//	PROLOG FAILURE ERROR HANDLERS
// ------------------------------------------------------------------
		
	Plan handleTimeout
 		println("timeout!! GOODBYE")
 	
 	Plan explorationFailure            
		println("Explore FAILURE" ) 
 	
 	Plan loadMapFailure           
		println("Load Map FAILURE" ) 
		 
 	Plan findpathFailure           
		println("Find Path FAILURE" )  
 	
 	Plan navigationFailure            
		println("Navigation FAILURE" )
		
	Plan alternativeFindpathFailure            
		println("Alternative Find Path FAILURE" )  
 		
 	Plan consultPrologFailure            
		println("The consult is gone wrong, maybe there are errors in the prolog file" ) 
 		
 	Plan generalPrologFailure            
		println("Prolog goal FAILURE" ) 	
	
}


QActor robot context ctxRobot{
 	Plan init normal
		
		println( "just a placeholder" );		
		receiveMsg time(1000000000);
		
		printCurrentMessage;
		
		onMsg exploredebug : exploredebug( START , BOUNDS ) -> switchToPlan simulateExploration;
		
		repeatPlan 0
		
		
	Plan simulateExploration
	
		println("let's explore!!");		
		delay time(1000);
		
		emit expdata : expdata (position(0,3), clear);
		delay time(1000);
		emit expdata : expdata (position(0,2), clear);
		delay time(1000);
		emit expdata : expdata (position(0,1), clear);
		delay time(1000);
		emit expdata : expdata (position(0,0), object);
		delay time(1000);
		emit expdata : expdata (position(1,1), clear);
		delay time(1000);
		emit expdata : expdata (position(1,0), clear);
		delay time(1000);
		emit expdata : expdata (position(2,0), clear);
		delay time(1000);
		emit expdata : expdata (position(3,0), clear);
		delay time(1000);
		emit expdata : expdata (position(3,1), clear);
		delay time(1000);
		emit expdata : expdata (position(3,2), clear);
		delay time(1000);
		emit expdata : expdata (position(3,3), object);
		delay time(1000);
		emit expdata : expdata (position(2,2), object);
		delay time(1000);
		emit expdata : expdata (position(2,1), object);
		delay time(1000);
		emit expdata : expdata (position(1,2), clear);
		delay time(1000);
		emit expdata : expdata (position(1,3), clear);
		delay time(1000);
		emit expdata : expdata (position(2,3), clear);
		delay time(1000);
		
		emit end : end;
		
		resumeLastPlan
 	
 }
