/* Generated by AN DISI Unibo */ 
/*
This code is generated only ONCE
*/
package it.unibo.console;

import java.awt.Point;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import it.unibo.gui.CellState;
import it.unibo.gui.ConsoleGUI;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.model.implementation.Map;
import it.unibo.model.interfaces.IGUI;
import it.unibo.model.interfaces.IMap;
import it.unibo.planning.astar.algo.AStarSearchAgent;
import it.unibo.planning.astar.engine.AStarEngine;
import it.unibo.qactors.ActorContext;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.QActorUtils;

public class Console extends AbstractConsole { 
	
	
	private IMap map;
	private it.unibo.planning.astar.algo.Path path;
	
	private int sx, sy;	
	
	public Console(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception
	{
		super(actorId, myCtx, outEnvView);
		((IGUI) env).setController(this);
		path = null;
	}
	
	
	// EXPLORATION METHODS ------------------------------------------------
	
		public void showClearMap()
		{
			//TODO
		}
		
		public void showClearMap(int xmax, int ymax)
		{
			map = new Map(ymax, xmax);
			((ConsoleGUI)env).clearCurrentExplorationMap();
		}
		
		public void updateMap(int x, int y, String state)
		{
			map.setCell(y, x, Map.fromStringToState(state));
			((ConsoleGUI) env).setCellState(y, x, CellState.fromString(state));
		}
		
		
		// NAVIGATION METHODS -------------------------------------------------
		
		// BUTTON MAP - ConsoleGUI
		public void loadMapButton(String path, String mode)
		{
			Map m = null;
			
			System.out.println(mode);
				
			List<String> data = new ArrayList<String>();						
			try
			{
				InputStream fs = new FileInputStream(path);
				InputStreamReader inpsr = new InputStreamReader(fs);
				BufferedReader br       = new BufferedReader(inpsr);
				Iterator<String> lsit   = br.lines().iterator();

				while(lsit.hasNext())
				{
					data.add(lsit.next());
				}
				br.close();
				
			} catch (Exception e)
			{
				System.out.println("QActor  ERROR " + e.getMessage());
			}
				
			for(int i=0; i<data.size(); i++)
			{
				if(i == 0)
				{
					m = Map.createMapFromPrologRep(data.get(i));
				}
				else
				{
					String s[] = data.get(i).split(" ");
					m.addElementFromString(s[1]);
				}
			}
			this.map = m;
			
			
			((ConsoleGUI)env).setMap(m);
			
		}	

		public void searchBestPath(int sx, int sy, int gx, int gy)
		{		
			this.sx = sx;
			this.sy = sy;
			
			AStarSearchAgent agent = new AStarSearchAgent();
			
			long st = System.currentTimeMillis();
			
			AStarEngine engine = new AStarEngine();		
			
			engine.setIntMap(map.getIntMap(), map.getYmax(), map.getXmax());
			
			println("LET'S FIND BEST PATH");
			
			path = agent.searchBestPath(engine,new Point(sx,sy), new Point(gx,gy));		
			
			println("Search Time --> " + (System.currentTimeMillis() - st) +" ms");
		}

		public void showPathOnGui()
		{
			((IGUI)env).setPath(path.getPoints());
		}

		private String getPrologPlan()
		{
			String moves = "plan([";
			for(int i=0; i<path.getMoves().size(); i++)
			{
				moves += path.getMoves().get(i).toString();
				if(i!=path.getMoves().size()-1)
					moves+=",";
			}
			moves+="])";
			//println(moves);
			return moves;
		}

		private String getPrologPosition()
		{
			return "position( "+sx+", "+sy+" )";
			
		}

		public void sendNavigationData()
		{	
			String pp = getPrologPlan();
			String po = getPrologPosition();
			
			println(pp);
			println(po);
			
			temporaryStr = QActorUtils.unifyMsgContent(pengine, "navigate(PLAN,POS)","navigate("+pp+","+po+")", guardVars ).toString();
			println("temp string "+temporaryStr);
			try
			{
				sendMsg("navigate","robot", ActorContext.dispatch, temporaryStr );
			} catch (Exception e)
			{
				e.printStackTrace();
			}		
		}

		// GUI INTERACTION ---------------------------------------------------
		
		public void myClearGUI()
		{
			((ConsoleGUI)env).clearGUI();
		}
		
		@Override
		public void execAction(String cmd) {
			
			String[] command = cmd.split(" ");		
			String[] params;
			switch (command[0]){
			
			case "LOADEXP":
				
				//temporaryStr = QActorUtils.unifyMsgContent(pengine, "local_gui_command(COMMAND)","local_gui_command(loadexpmap(\""+command[1]+"\")", guardVars ).toString();
				
				emit("local_gui_command", "local_gui_command(loadexpmap(\""+command[1]+"\"))");
				break;
			
			case "EXPLORE":
				emit( "local_gui_command", "local_gui_command(explore))");
				break;
			
			case "EXPLOREDEBUG":
				
				params = command[1].split(",");
				
				emit( "local_gui_command", "local_gui_command(explore("
						+ "position(" + params[0] + "," + params[1]+")"
								+ ","
						+ "map(" + params[2] + "," + params[3]+")"
								+ "))");
				break;
				
			case "LOAD":
				emit( "local_gui_command", "local_gui_command(loadmap(\""+command[1]+"\"))");
				break;
			
				
			case "NAVIGATE":
				emit( "local_gui_command", "local_gui_command(navigate)");
				break;
				
			case "FIND":
				params = command[1].split(",");
				
				emit( "local_gui_command", "local_gui_command(findpath("
							+ "position(" + params[0] + "," + params[1]+")"
									+ ","
							+ "position(" + params[2] + "," + params[3]+")"
									+ ")");
							
				break;
							
			case "ABORT":
				emit( "local_gui_command", "local_gui_command(abort)");
				break;
				
			case "CLEAR":
				emit( "local_gui_command", "local_gui_command(clear)");
				break;
			default:
				println("Invalid command");
			}
		}	
}
