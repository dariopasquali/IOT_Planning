plan(1,init, sentence(true,move(solve,consult( "robotTheory.pl"),210000000,"consultPrologFailure"),'','' ))
plan(2,init, sentence(true,move(solve,consult( "navRobotTheory.pl"),210000000,"consultPrologFailure"),'','' ))
plan(3,init, sentence(true,move(solve,consult( "expRobotTheory.pl"),210000000,"consultPrologFailure"),'','' ))
plan(4,init, sentence(true,move(solve,consult( "talkTheory.pl"),210000000,"consultPrologFailure"),'','' ))
plan(5,init, sentence(true,move(print,"++++++++++++++++++ robot(starts) ++++++++++++++++++"),'','' ))
plan(6,init, sentence(true,move( switchplan(waitConsoleCommand) ),'','' ))
plan(1,waitConsoleCommand, sentence(true,move(print,"++++++++++++++++++ WAIT CONSOLE COMMAND ++++++++++++++++++"),'','' ))
plan(2,waitConsoleCommand, sentence(true,receiveMsg(''),'','' ))
plan(3,waitConsoleCommand, sentence(true,printCurrentMessage(''),'','' ))
plan(4,waitConsoleCommand, sentence(true, memoCurrentMessage,'','' ))
plan(5,waitConsoleCommand, sentence(true,msgswitch(explore, explore , move( switchplan(exploration) )),'','' ))
plan(6,waitConsoleCommand, sentence(true,msgswitch(explore, explore( START,BOUNDS) , move( switchplan(explorationDebug) )),'','' ))
plan(7,waitConsoleCommand, sentence(true,msgswitch(navigate, navigate( PLAN,POS) , move( switchplan(navigation) )),'','' ))
plan(8,waitConsoleCommand, sentence(true,move(repeatplan) ,'','' ))
plan(9,waitConsoleCommand, sentence(true,move(resumeplan),'','' ))
plan(1,exploration, sentence(true,move(print,""),'','' ))
plan(2,exploration, sentence(true,move(resumeplan),'','' ))
plan(1,explorationDebug, sentence(true,move(print,"Let's explore!!"),'','' ))
plan(2,explorationDebug, sentence(-  msg( _,_,SENDER,X,explore( START,BOUNDS),MSGNUM) ,move(solve,initExploreMap( START,BOUNDS),0,""),'','' ))
plan(3,explorationDebug, sentence(true,move( switchplan(notifyCell) ),'','' ))
plan(4,explorationDebug, sentence(true,move(solve,assert( explore( true)),0,""),'','' ))
plan(5,explorationDebug, sentence(true,move( switchplan(findLeftWall) ),'','' ))
plan(6,explorationDebug, sentence(true,move(resumeplan),'','' ))
plan(1,findLeftWall, sentence(true,move(print,"Find Left Wall!"),'','' ))
plan(2,findLeftWall, sentence(true,senseEvent([obstacle],[continue],'','' ))
plan(3,findLeftWall, sentence(true,eventswitch(obstacle, Â»obstacle( front), move(solve,assert( obstacle( front,obstacle)),0,"") ),'','' ))
plan(4,findLeftWall, sentence( obstacle( front,clear),move(solve,updateModel( front,clear),0,""),'','' ))
plan(5,findLeftWall, sentence(-  obstacle( front,clear) ,move( switchplan(notifyCell) ),'','' ))
plan(6,findLeftWall, sentence( obstacle( front,obstacle),move(solve,updateModel( front,obstacle),0,""),'','' ))
plan(7,findLeftWall, sentence( obstacle( front,obstacle),move( switchplan(notifyCell) ),'','' ))
plan(8,findLeftWall, sentence(-  obstacle( front,obstacle) ,move( switchplan(turnRightAndFollow) ),'','' ))
plan(9,findLeftWall, sentence(true,senseEvent([obstacle],[continue],'','' ))
plan(10,findLeftWall, sentence(true,eventswitch(obstacle, Â»obstacle( left), move(solve,assert( obstacle( left,obstacle)),0,"") ),'','' ))
plan(11,findLeftWall, sentence( obstacle( left,clear),move(solve,updateModel( left,clear),0,""),'','' ))
plan(12,findLeftWall, sentence(-  obstacle( left,clear) ,move( switchplan(notifyCell) ),'','' ))
plan(13,findLeftWall, sentence( obstacle( left,obstacle),move(solve,updateModel( left,obstacle),0,""),'','' ))
plan(14,findLeftWall, sentence( obstacle( left,obstacle),move( switchplan(notifyCell) ),'','' ))
plan(15,findLeftWall, sentence(-  obstacle( left,obstacle) ,move( switchplan(followWall) ),'','' ))
plan(16,findLeftWall, sentence(true,move(print,"Forward Step"),'','' ))
plan(17,findLeftWall, sentence(true,move(solve,moveForward,10000000,""),'','' ))
plan(18,findLeftWall, sentence(true,move(solve,addCurrentToVisited,10000000,""),'','' ))
plan(19,findLeftWall, sentence(true,move(repeatplan) ,'','' ))
plan(20,findLeftWall, sentence(true,move(resumeplan),'','' ))
plan(1,turnRightAndFollow, sentence(true,move(print,"turn right and follow"),'','' ))
plan(2,turnRightAndFollow, sentence(true,move(solve,turnDoubleRight,0,""),'','' ))
plan(3,turnRightAndFollow, sentence(true,move( switchplan(followWall) ),'','' ))
plan(4,turnRightAndFollow, sentence(true,move(resumeplan),'','' ))
plan(1,turnLeftAndFind, sentence(true,move(print,"Wall Found!! - Left"),'','' ))
plan(2,turnLeftAndFind, sentence(true,move(solve,turnDoubleLeft,0,""),'','' ))
plan(3,turnLeftAndFind, sentence(true,move( switchplan(findLeftWall) ),'','' ))
plan(4,turnLeftAndFind, sentence(true,move(resumeplan),'','' ))
plan(1,turnLeft, sentence(true,move(print,"turn Left"),'','' ))
plan(2,turnLeft, sentence(true,move(solve,turnDoubleLeft,0,""),'','' ))
plan(3,turnLeft, sentence(true,move(resumeplan),'','' ))
plan(1,turnRight, sentence(true,move(print,"turn Right"),'','' ))
plan(2,turnRight, sentence(true,move(solve,turnDoubleLeft,0,""),'','' ))
plan(3,turnRight, sentence(true,move(resumeplan),'','' ))
plan(1,followWall, sentence(true,move(print,"Follow Wall"),'','' ))
plan(2,followWall, sentence(true,senseEvent([obstacle],[continue],'','' ))
plan(3,followWall, sentence(true,eventswitch(obstacle, Â»obstacle( left), move(solve,assert( obstacle( left,object)),0,"") ),'','' ))
plan(4,followWall, sentence( obstacle( left,clear),move(solve,updateModel( left,clear),0,""),'','' ))
plan(5,followWall, sentence(-  obstacle( left,clear) ,move( switchplan(notifyCell) ),'','' ))
plan(6,followWall, sentence( obstacle( left,object),move(solve,updateModel( left,object),0,""),'','' ))
plan(7,followWall, sentence( obstacle( left,object),move( switchplan(notifyCell) ),'','' ))
plan(8,followWall, sentence(-  obstacle( left,object) ,move( switchplan(turnLeftAndFind) ),'','' ))
plan(9,followWall, sentence(true,senseEvent([obstacle],[continue],'','' ))
plan(10,followWall, sentence(true,eventswitch(obstacle, Â»obstacle( front), move(solve,assert( obstacle( front,object)),0,"") ),'','' ))
plan(11,followWall, sentence( obstacle( front,clear),move(solve,updateModel( front,clear),0,""),'','' ))
plan(12,followWall, sentence( obstacle( front,clear),move( switchplan(notifyCell) ),'','' ))
plan(13,followWall, sentence(-  obstacle( front,clear) ,move( switchplan(moveAndCheckLoop) ),'','' ))
plan(14,followWall, sentence( obstacle( front,object),move(solve,updateModel( front,object),0,""),'','' ))
plan(15,followWall, sentence( obstacle( front,object),move( switchplan(notifyCell) ),'','' ))
plan(16,followWall, sentence(-  obstacle( front,object) ,move( switchplan(frontWallFound) ),'','' ))
plan(17,followWall, sentence(true,move(repeatplan) ,'','' ))
plan(18,followWall, sentence(true,move(resumeplan),'','' ))
plan(1,frontWallFound, sentence(true,move(print,"I hit a wall"),'','' ))
plan(2,frontWallFound, sentence(true,senseEvent([obstacle],[continue],'','' ))
plan(3,frontWallFound, sentence(true,eventswitch(obstacle, Â»obstacle( left), move(solve,assert( obstacle( left,object)),0,"") ),'','' ))
plan(4,frontWallFound, sentence( obstacle( left,clear),move(solve,updateModel( left,clear),0,""),'','' ))
plan(5,frontWallFound, sentence( obstacle( left,clear),move( switchplan(notifyCell) ),'','' ))
plan(6,frontWallFound, sentence( obstacle( left,object),move(solve,updateModel( left,object),0,""),'','' ))
plan(7,frontWallFound, sentence( obstacle( left,object),move( switchplan(notifyCell) ),'','' ))
plan(8,frontWallFound, sentence(true,move(solve,senseAndCheckLeft,1000000,""),'','' ))
plan(9,frontWallFound, sentence( notLeftObjectAndNotExplored( true),move( switchplan(turnLeft) ),'','' ))
plan(10,frontWallFound, sentence(true,move(resumeplan),'','' ))
plan(11,frontWallFound, sentence(true,move(resumeplan),'','' ))
plan(1,moveAndCheckLoop, sentence(true,move(print,"let's move"),'','' ))
plan(2,moveAndCheckLoop, sentence(true,move(solve,moveForward,100000,""),'','' ))
plan(3,moveAndCheckLoop, sentence(true,move(solve,checkCurrentAlreadyVisited,100000,""),'','' ))
plan(4,moveAndCheckLoop, sentence( currentAlreadyVisited( false),move( switchplan(loopAvoidance) ),'','' ))
plan(5,moveAndCheckLoop, sentence(true,move(resumeplan),'','' ))
plan(6,moveAndCheckLoop, sentence(true,move(resumeplan),'','' ))
plan(1,loopAvoidance, sentence(true,move(print,"I'm in a looooop"),'','' ))
plan(2,loopAvoidance, sentence(true,move(solve,findNearestNotExploredCell,1000000,""),'','' ))
plan(3,loopAvoidance, sentence( explore( false),move( switchplan(endOfExploration) ),'','' ))
plan(4,loopAvoidance, sentence(true,move(solve,computeBestPath,1000000000,""),'','' ))
plan(5,loopAvoidance, sentence(true,move(solve,travel,1000000000,""),'','' ))
plan(6,loopAvoidance, sentence(true,move( switchplan(findLeftWall) ),'','' ))
plan(7,loopAvoidance, sentence(true,move(resumeplan),'','' ))
plan(1,notifyCell, sentence(true,move(print,"notify clear cell"),'','' ))
plan(2,notifyCell, sentence(-  newCell( POS,STATE) ,raise( expdata , expdata( POS,STATE) )'),'','' ))
plan(3,notifyCell, sentence(true,move(resumeplan),'','' ))
plan(1,endOfExploration, sentence(true,move(print,"Exploration done"),'','' ))
plan(2,endOfExploration, sentence(true,move(resumeplan),'','' ))
plan(1,navigation, sentence(true,move(print,"I Received some navigation data"),'','' ))
plan(2,navigation, sentence(-  msg( _,_,SENDER,X,navigate( PLAN,POS),MSGNUM) ,move(solve,loadNavigationData( PLAN,POS),100000,"loadMapFailure"),'','' ))
plan(3,navigation, sentence(true,move( switchplan(startNavigation) ),'','' ))
plan(4,navigation, sentence(true,move(resumeplan),'','' ))
plan(1,startNavigation, sentence( planFilename( FILENAME),move(solve,loadThePlan( FILENAME),300000000,""),'','' ))
plan(2,startNavigation, sentence(true,move(print,"++++++++++++++++++ Plan Loaded ++++++++++++++++++"),'','' ))
plan(3,startNavigation, sentence(true,move(print," "),'','' ))
plan(4,startNavigation, sentence(true,move(print," "),'','' ))
plan(5,startNavigation, sentence( planName( PLANNAME),move(solve,showPlan( PLANNAME),1000,""),'','' ))
plan(6,startNavigation, sentence(true,move(print," "),'','' ))
plan(7,startNavigation, sentence(true,move(print," "),'','' ))
plan(8,startNavigation, sentence(true,move(print,"++++++++++++++++++ ++++++++++++++++++ ++++++++++++++++++"),'','' ))
plan(9,startNavigation, sentence( planName( PLANNAME),move(solve,myRunPlan( PLANNAME),1000000000,""),'','' ))
plan(10,startNavigation, sentence(true,move(resumeplan),'','' ))
plan(1,abort, sentence(true,move(print,"Current command aborted"),'','' ))
plan(2,abort, sentence(true,move( switchplan(waitConsoleCommand) ),'','' ))
plan(3,abort, sentence(true,move(resumeplan),'','' ))
plan(1,waitAndEvaluate, sentence(true,move(print,"maybe there is an unexpected static obstacle"),'','' ))
plan(2,waitAndEvaluate, sentence(true,delay( ) ,'','' ))
plan(3,waitAndEvaluate, sentence(true,move(print,"are you there obstacle ??"),'','' ))
plan(4,waitAndEvaluate, sentence(true,senseEvent([obstacle],[notifyUnexpectedObstacle],'','' ))
plan(5,waitAndEvaluate, sentence(true,move(resumeplan),'','' ))
plan(1,notifyUnexpectedObstacle, sentence(true,move(print,"I found an unexpected static obstacle"),'','' ))
plan(2,notifyUnexpectedObstacle, sentence(true,move(solve,getCurrentPosition( CURRENT),2100000000,"navigationFailure"),'','' ))
plan(3,notifyUnexpectedObstacle, sentence(true,move(solve,getObstaclePosition( OBJECT),2100000000,"navigationFailure"),'','' ))
plan(4,notifyUnexpectedObstacle, sentence(true,raise( update , update( OBJECT,CURRENT) )'),'','' ))
plan(5,notifyUnexpectedObstacle, sentence(true,move(print,"Unexpected Obstacle notified, I wait the new plan"),'','' ))
plan(6,notifyUnexpectedObstacle, sentence(true,move( switchplan(waitConsoleCommand) ),'','' ))
plan(7,notifyUnexpectedObstacle, sentence(true,move(resumeplan),'','' ))
plan(1,notifyEndOfNavigation, sentence(true,move(print,"passato al piano successivo"),'','' ))
plan(2,notifyEndOfNavigation, sentence(true,move(solve,notifyEnd,10000,"generalPrologFailure"),'','' ))
plan(3,notifyEndOfNavigation, sentence(true,move(print,"ma la chiamata prolog fallisce per un motivo non ben definito"),'','' ))
plan(4,notifyEndOfNavigation, sentence(true,move(resumeplan),'','' ))
plan(1,handleTimeout, sentence(true,move(print,"timeout!! GOODBYE"),'','' ))
plan(2,handleTimeout, sentence(true,move(resumeplan),'','' ))
plan(1,explorationFailure, sentence(true,move(print,"Explore FAILURE"),'','' ))
plan(2,explorationFailure, sentence(true,move(resumeplan),'','' ))
plan(1,loadMapFailure, sentence(true,move(print,"Load Map FAILURE"),'','' ))
plan(2,loadMapFailure, sentence(true,move(resumeplan),'','' ))
plan(1,findpathFailure, sentence(true,move(print,"Find Path FAILURE"),'','' ))
plan(2,findpathFailure, sentence(true,move(resumeplan),'','' ))
plan(1,navigationFailure, sentence(true,move(print,"Navigation FAILURE"),'','' ))
plan(2,navigationFailure, sentence(true,move(resumeplan),'','' ))
plan(1,alternativeFindpathFailure, sentence(true,move(print,"Alternative Find Path FAILURE"),'','' ))
plan(2,alternativeFindpathFailure, sentence(true,move(resumeplan),'','' ))
plan(1,consultPrologFailure, sentence(true,move(print,"The consult is gone wrong, maybe there are errors in the prolog file"),'','' ))
plan(2,consultPrologFailure, sentence(true,move(resumeplan),'','' ))
plan(1,generalPrologFailure, sentence(true,move(print,"Prolog goal FAILURE"),'','' ))
plan(2,generalPrologFailure, sentence(true,move(resumeplan),'','' ))
