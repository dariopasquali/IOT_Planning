/*
================================================================================
build_ctxRobot.gradle
USAGE:	 
	gradle -b build_ctxRobot.gradle eclipse	//to set the dependency on the library
	gradle -b build_ctxRobot.gradle build
================================================================================
*/
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'java-library-distribution'

/*
--------------------------------------------------------------
PROPERTIES
--------------------------------------------------------------
*/
version = "1.0"
sourceCompatibility = "1.8"
ext{
	mainClassName = "it.unibo.ctxRobot.MainCtxRobot"
}
/*
--------------------------------------------------------------
DIRS
--------------------------------------------------------------
*/
sourceSets {
	main {
		java {
			srcDirs = ['src' , 'src-gen'  ]
		}
	}
	test {
		 java {
		   srcDirs = ['test']
		 }
	}
}
/*
--------------------------------------------------------------
DEPENDENCIES
--------------------------------------------------------------
*/
repositories {
      mavenCentral()
}
dependencies {
	  compile fileTree(dir: 'C:/aLab2016/lab2014Bo/it.unibo.iss.libs/libs/unibo', include: 'uniboInterfaces.jar')
	  compile fileTree(dir: 'C:/aLab2016/lab2014Bo/it.unibo.iss.libs/libs/unibo', include: 'unibonoawtsupports.jar')
	  compile fileTree(dir: 'C:/aLab2016/lab2014Bo/it.unibo.iss.libs/libs/unibo', include: 'uniboEnvBaseAwt.jar')
	  compile fileTree(dir: 'C:/aLab2016/lab2014Bo/it.unibo.iss.libs/libs/unibo', include: '2p301.jar')
	  compile fileTree(dir: 'C:/aLab2016/lab2014Bo/it.unibo.iss.libs/libs/http', include: 'nanoHTTPD.jar')
	  compile fileTree(dir: 'C:/aLab2016/lab2014Bo/it.unibo.iss.libs/libs/http', include: 'qa18Akka.jar')
      testCompile 'junit:junit:4.12'
      // https://mvnrepository.com/artifact/com.typesafe.akka/akka-actor_2.11
	  compile group: 'com.typesafe.akka', name: 'akka-actor_2.11', version: '2.4.8'
	  compile group: 'com.typesafe.akka', name: 'akka-remote_2.11', version: '2.4.9-RC2'
}
/*
--------------------------------------------------------------
AFTER TEST
--------------------------------------------------------------
*/
test {
    afterTest { desc, result -> 
        println "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }
}
/*
---------------------------------------------------------------------
JAR: incldes src-gen code (excluding Java) in the executable jar
---------------------------------------------------------------------
*/
jar {
   	from( 'src-gen' ){ include '**/*.*'	 exclude '**/*.java'  }
 	manifest {
 		attributes "Class-Path": '.  ' + configurations.compile.collect { "lib/"+it.getName() }.join(' ')
		attributes 'Main-Class': "$mainClassName"
	}
}
/*
---------------------------------------------------------
PREPARE DISTRIBUTION
---------------------------------------------------------
*/
task copyInfoForDist << {
	copy {
		from 'audio'
		into 'src/dist/audio/'
		include '**/*.*'
 	}
	copy { 
		from 'srcMore'
		into 'src/dist/srcMore/'
		include '**/*.*'
 	}
	copy { 
		from '.'
		into 'src/dist/'
		include '*.pl'
 	}
}
jar.dependsOn copyInfoForDist
