/* Generated by AN DISI Unibo */ 
/*
This code is generated only ONCE
*/
package it.unibo.console;

import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.planning.astar.algo.AStarSearchAgent;
import it.unibo.planning.astar.engine.AStarEngine;
import it.unibo.qactors.ActorContext;
import it.unibo.search.algofactory.Algo;

import java.awt.Point;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.imageio.ImageIO;

import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.MatOfByte;
import org.opencv.core.Size;
import org.opencv.highgui.Highgui;
import org.opencv.imgproc.Imgproc;

import it.unibo.console.gui.*;
import it.unibo.console.ImageGui.*;
import it.unibo.domain.model.implmentation.IntMap;
import it.unibo.domain.model.implmentation.Map;
import it.unibo.domain.model.interfaces.IMap;
import it.unibo.domain.model.interfaces.IGUI;

public class Console extends AbstractConsole { 
	
	private IMap map;
	private it.unibo.planning.astar.algo.Path path;
	
	private int sx, sy, gx, gy;	
	private long startLoadTime;	
	private Algo algorithm;
	
	public Console(String actorId, ActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
		super(actorId, myCtx, outEnvView);
		System.loadLibrary( Core.NATIVE_LIBRARY_NAME );
		((IGUI) env).setController(this);
		path = null;
	}
	
	public void createMap(int x, int y)
	{
		map = new Map(x,y);
		startLoadTime = System.currentTimeMillis();
	}
	
	public void setMapElements(List<String> elements)
	{
		((ConsoleGUI)env).setMap((Map)map);
	}
	
	public void setMapElements(String elements)
	{
		map.addElementsFromString(elements);
		((ConsoleGUI)env).setMap((Map)map);
		System.out.print("Map Loading time: "+(System.currentTimeMillis()-startLoadTime));
	}
	
	// BUTTON MAP - ConsoleGUI
	public void loadMapButton(String path)
	{
		Map m = null;
		
		List<String> data = new ArrayList<String>();						
		try
		{
			InputStream fs = new FileInputStream(path);
			InputStreamReader inpsr = new InputStreamReader(fs);
			BufferedReader br       = new BufferedReader(inpsr);
			Iterator<String> lsit   = br.lines().iterator();

			while(lsit.hasNext())
			{
				data.add(lsit.next());
			}
			br.close();
			
		} catch (Exception e)
		{
			System.out.println("QActor  ERROR " + e.getMessage());
		}
		
		for(int i=0; i<data.size(); i++)
		{
			if(i == 0)
			{
				m = Map.createMapFromPrologRep(data.get(i));
			}
			else
			{
				String s[] = data.get(i).split(" ");
				m.addElementsFromString(s[1]);
			}
		}
		this.map = m;
		((ConsoleGUI)env).setMap(m);
	
	}
	
		
	//IMAGE MAP - ImageGUI
	public void loadMapImage(String path)
	{
		Mat image = Highgui.imread(path, Highgui.CV_LOAD_IMAGE_GRAYSCALE);
	    System.out.println(image.size());
	    System.out.println(CvType.channels(image.type()));
	    
	    int cleanSize = 5;
	    Mat element = Imgproc.getStructuringElement(Imgproc.MORPH_RECT, new  Size(cleanSize + 1, cleanSize+1));
	    Imgproc.erode(image, image, element);
	    Imgproc.dilate(image, image, element);
	    
	    Mat tresh = new Mat();
	    Imgproc.threshold(image, tresh, 180, 255, Imgproc.THRESH_BINARY);
	    
	    Integer[][] pixels = matToIntMatrix(tresh, 16777215);
		
		map = new IntMap(image.width(), image.height(), pixels);
		((ImageGUI)env).setMap(map, tresh);
	
	}
	
	private Integer[][] matToIntMatrix(Mat image, int range)
	{
		MatOfByte matOfByte = new MatOfByte();
	    Highgui.imencode(".jpg", image, matOfByte);
	    byte[] byteArray = matOfByte.toArray();
	    BufferedImage bufImage = null;
	    try 
	    {
	        InputStream in = new ByteArrayInputStream(byteArray);
	        bufImage = ImageIO.read(in);
	        int width = bufImage.getWidth(null);
		    int height = bufImage.getHeight(null);
		    Integer[][] pixels = new Integer[width][height];
		    for (int i = 0; i < width; i++) {
		        for (int j = 0; j < height; j++) {
		            pixels[i][j] = Math.abs(bufImage.getRGB(i, j)/range);
		        }
		    }

		    return pixels;
	    }
	    catch (Exception e) {
	        e.printStackTrace();
	    }
	    return null;
	}
	
	public void searchBestPath(int sx, int sy, int gx, int gy, String algo)
	{		
		algorithm = Algo.fromStringValue(algo);
		
		this.sx = sx;
		this.sy = sy;
		this.gx = gx;
		this.gy = gy;
		
		AStarSearchAgent agent = new AStarSearchAgent();
		
		long st = System.currentTimeMillis();
		
		AStarEngine engine = new AStarEngine();		
		
		engine.setIntMap(map.getIntMap(), map.getXmax(), map.getYmax());
		
		println("LET'S FIND BEST PATH");
		
		path = agent.searchBestPath(engine,new Point(sx,sy), new Point(gx,gy));		
		
		println("Search Time --> " + (System.currentTimeMillis() - st) +" ms");
	}
	
	public void showPathOnGui()
	{
		((IGUI)env).setPath(path.getPoints());
	}
	
	private String getPrologMap()
	{
		String data = "mapdata( "+map.toString()+" )";
		//println(data);
		return data;
	}
	
	private String getPrologPlan()
	{
		String moves = "plan("+algorithm.getValue()+", [";
		for(int i=0; i<path.getMoves().size(); i++)
		{
			moves += path.getMoves().get(i).toString();
			if(i!=path.getMoves().size()-1)
				moves+=",";
		}
		moves+="])";
		//println(moves);
		return moves;
	}
	
	private String getPrologPosition()
	{
		return "position( "+sx+", "+sy+" )";
		
	}
	
	public void sendNavigationData()
	{	
		//String pm = getPrologMap();
		String pp = getPrologPlan();
		String po = getPrologPosition();
		
		//println(pm);
		println(pp);
		println(po);
		
		//temporaryStr = unifyMsgContent("navdata(MAP,PLAN,POS)","navdata("+pm+","+pp+","+po+")", guardVars ).toString();
		
		temporaryStr = unifyMsgContent("navdata(PLAN,POS)","navdata("+pp+","+po+")", guardVars ).toString();
		println("temp string "+temporaryStr);
		try
		{
			sendMsg("navdata","robot", ActorContext.dispatch, temporaryStr );
		} catch (Exception e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	
	
	@Override
	public void execAction(String cmd) {
		
		String[] command = cmd.split(" ");		
		String[] params;
		switch (command[0]){
		case "LOAD":
			platform.raiseEvent("input", "local_gui_command", "local_gui_command(loadmap(\""+command[1]+"\"))");
			break;
		
			
		case "NAVIGATE":
			platform.raiseEvent("input", "local_gui_command", "local_gui_command(navigate)");
			break;
			
		case "FIND":
			params = command[1].split(",");
			
			platform.raiseEvent("input", "local_gui_command", "local_gui_command(findpath("
						+ "position(" + params[0] + "," + params[1]+")"
								+ ","
						+ "position(" + params[2] + "," + params[3]+")"
								+ "," + params[4]
								+ "))");
						
			break;
						
		case "ABORT":
			platform.raiseEvent("input", "local_gui_command", "local_gui_command(abort)");
			break;
		default:
			println("Invalid command");
		}
	}
	
	
}
