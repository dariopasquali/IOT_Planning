/* Generated by AN DISI Unibo */ 
/*
This code is generated only ONCE
*/
package it.unibo.console;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.planning.astar.algo.SearchAgent;
import it.unibo.planning.astar.domain.State.Direction;
import it.unibo.qactors.ActorContext;

import java.util.ArrayList;
import java.util.List;

import it.unibo.console.gui.*;
import it.unibo.domain.model.implmentation.Map;

public class Console extends AbstractConsole { 
	
	private Map map;
	private ArrayList<it.unibo.planning.astar.domain.State> path;
	
	private int sx, sy, gx, gy;
	
	public Console(String actorId, ActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
		super(actorId, myCtx, outEnvView);
		((ConsoleGUI) env).setController(this);
		path = null;
	}
	
	public void createMap(int x, int y)
	{
		map = new Map(x,y);
	}
	
	public void setMapElements(List<String> elements)
	{
		((ConsoleGUI)env).setMap(map);
	}
	
	public void setMapElements(String elements)
	{
		map.addElementsFromString(elements);
		((ConsoleGUI)env).setMap(map);		
	}
	
	public void searchBestPath(int sx, int sy, int gx, int gy)
	{		
		this.sx = sx;
		this.sy = sy;
		this.gx = gx;
		this.gy = gy;
		
		SearchAgent agent = new SearchAgent();
		
		it.unibo.planning.astar.domain.State start = 
				new it.unibo.planning.astar.domain.State(sx, sy, Direction.NORTH, null, 0, map.getXmax());
		
		it.unibo.planning.astar.domain.State goal = 
				new it.unibo.planning.astar.domain.State(gx, gy, Direction.NONE, null, 0, map.getXmax());
		
		long st = System.currentTimeMillis();
		
		path = agent.searchBestStatePath(this,start, goal);	
		
		println("Search Time --> " + (System.currentTimeMillis() - st) +" ms");
	}
	
	public void showPathOnGui()
	{
		((ConsoleGUI)env).setPath(path);
	}
	
	private String getPrologMap()
	{
		String data = "mapdata( "+map.toString()+" )";
		//println(data);
		return data;
	}
	
	private String getPrologPlan()
	{
		String moves = "plan( [";
		for(int i=0; i<path.size(); i++)
		{
			moves += path.get(i).getGenMove().toString();
			if(i!=path.size()-1)
				moves+=",";
		}
		moves+="])";
		//println(moves);
		return moves;
	}
	
	private String getPrologPositions()
	{
		return "positions( "+sx+", "+sy+", "+gx+", "+gy+" )";
		
	}
	

	public void sendNavigationData()
	{	
		String pm = getPrologMap();
		String pp = getPrologPlan();
		String po = getPrologPositions();
		
		println(pm);
		println(pp);
		println(po);
		
		temporaryStr = unifyMsgContent("navdata(MAP,PLAN,POS)","navdata("+pm+","+pp+","+po+")", guardVars ).toString();
		try
		{
			sendMsg("navdata","robot", ActorContext.dispatch, temporaryStr );
		} catch (Exception e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	
	
	@Override
	public void execAction(String cmd) {
		
		String[] command = cmd.split(" ");		
		String[] params;
		switch (command[0]){
		case "LOAD":
			platform.raiseEvent("input", "local_gui_command", "local_gui_command(loadmap(\""+command[1]+"\"))");
			break;
		
			
		case "NAVIGATE":
			platform.raiseEvent("input", "local_gui_command", "local_gui_command(navigate)");
			break;
			
		case "FIND":
			params = command[1].split(",");
			
			platform.raiseEvent("input", "local_gui_command", "local_gui_command(findpath("
						+ "position(" + params[0] + "," + params[1]+")"
								+ ","
						+ "position(" + params[2] + "," + params[3]+")"
								+ "))");
						
			break;
						
		case "ABORT":
			platform.raiseEvent("input", "local_gui_command", "local_gui_command(abort)");
			break;
		default:
			println("Invalid command");
		}
	}
	
	
}
