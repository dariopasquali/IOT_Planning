RobotSystem scout

// ------------------------------------------------------------------
//		EXPLORATION - INTERACTION
// ------------------------------------------------------------------

// From Console to Robot to start Exploration
Dispatch explore : explore
Dispatch exploredebug : exploredebug ( START , BOUNDS)
Dispatch explorefile : explorefile (START, FILENAME )
//START = position ( X , Y )
//BOUNDS = map ( W , H )

// From Robot to Console to notify a new cell state
Event expdata : expdata ( POS , STATE )
//POS = position ( X , Y )
//STATE = clear || object

// ------------------------------------------------------------------
//		COMMON - INTERACTION
// ------------------------------------------------------------------

// Raised by Console to abort the current command
Event abort : abort

// Raised by Robot when it ends the current command
Event end : end


// ------------------------------------------------------------------
//		LOCAL - INTERACTION
// ------------------------------------------------------------------

// Raised by Sonar when an obstacle is detected
// The user can define the sensing distance in the sensorTheory.pl

//FrontSonar
Event obstaclefront : obstaclefront
Event obstacleleft : obstacleleft
// DIRECTION = front || left

// ------------------------------------------------------------------
//			CONTEXTS
// ------------------------------------------------------------------

Context ctxRobot ip [ host="localhost" port=8020]
Context ctxConsole ip [ host="localhost" port=8010]

QActor console context ctxConsole{
 	Plan init normal
		println( "NEVER HERE. I'm just a placeholder" ) 
 }

Robot mockScout QActor robot context ctxRobot{

// ------------------------------------------------------------------
//			NORMAL PLANS
// ------------------------------------------------------------------

	
	Plan init normal
		
		println("load theories");
		
		solve consult("robotTheory.pl") time(210000000) onFailSwitchTo  consultPrologFailure ;
		solve consult("exploreRobotTheory.pl") time(210000000) onFailSwitchTo  consultPrologFailure ;
		solve consult("talkTheory.pl") time(210000000) onFailSwitchTo  consultPrologFailure ;
		
 		println("++++++++++++++++++ robot(starts) ++++++++++++++++++");
 		
 		switchToPlan waitConsoleCommand
 		
 	Plan waitConsoleCommand
 		
		println("++++++++++++++++++ WAIT CONSOLE COMMAND ++++++++++++++++++");
 		
 		receiveMsg time(600000000);
 		printCurrentMessage;
 		memoCurrentMessage;
 		
 		onMsg explore : explore -> switchToPlan exploration;
 		onMsg exploredebug : exploredebug ( START , BOUNDS) -> switchToPlan explorationDebug;
 		onMsg explorefile : explorefile (START, FILENAME) -> switchToPlan explorationFile;
 		
 		repeatPlan 0		
 
 // EXPLORATION PLANS----------------------------------------------
 		
 	Plan exploration
 		println("")
 		
 
 // DEBUG EXPLORATION PLANS -----------------------------------		
 	
 	Plan explorationFile
 		println("Let's explore a file!!"); 	
 		
 		solve initialConfigExpRobot time(0);
 		
 		[?? msg(_, _, SENDER, X, explorefile(START, FILENAME), _)]
 								 solve initExploreFile(START, FILENAME) time(0)
 								 react event abort -> abort;
 								 
 		emit end : end;
 		println("Exploration Done ****************************");
 		resumeLastPlan
 	
 	Plan explorationDebug
 		println("Let's explore!!");
 		[?? msg(_, _, SENDER, X, explore(START,BOUNDS), _)]
 			 					 solve initExploreMap(START, BOUNDS) time(0)
 			 					 react event abort -> abort;
 		
 		emit end : end;
 		println("Exploration Done ****************************");
 		resumeLastPlan
 		
   	Plan abort 
 		println("Current command aborted");
 		switchToPlan waitConsoleCommand
	
// ------------------------------------------------------------------
//	PROLOG FAILURE ERROR HANDLERS
// ------------------------------------------------------------------
		
	Plan handleTimeout
 		println("timeout!! GOODBYE")
 	
 	Plan explorationFailure            
		println("Explore FAILURE" ) 
 	
 	Plan loadMapFailure           
		println("Load Map FAILURE" ) 
		 
 	Plan consultPrologFailure            
		println("The consult is gone wrong, maybe there are errors in the prolog file" ) 
 		
 	Plan generalPrologFailure            
		println("Prolog goal FAILURE" ) 
}









