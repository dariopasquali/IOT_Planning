System scout

// ------------------------------------------------------------------
//		EXPLORATION - INTERACTION
// ------------------------------------------------------------------

// From Console to Robot to start Exploration
Dispatch explore : explore
Dispatch exploredebug : exploredebug( START , BOUNDS )
Dispatch explorefile : explorefile(START , FILENAME )
//START = position ( X , Y )
//BOUNDS = map ( W , H )

// From Robot to Console to notify a new cell state
Event expdata : expdata( POS , STATE )
//POS = position ( X , Y )
//STATE = clear || object

// ------------------------------------------------------------------
//		COMMON - INTERACTION
// ------------------------------------------------------------------

// Raised by Console to abort the current command
Event abort : abort

// Raised by Robot when it ends the current command
Event end : end


// ------------------------------------------------------------------
//		LOCAL - INTERACTION
// ------------------------------------------------------------------


// Raised by the GUI on user interaction
Event local_gui_command : local_gui_command(COMMAND)
 
//Button --> COMMAND
//
//Explore --> explore || explore(FILENAME, START, BOUNDS, MODE); MODE = simulated || robot
//Load Map --> loadmap ( PATH );
//Abort --> abort;
//Clear Exploration --> clear;


// ------------------------------------------------------------------
//			CONTEXTS
// ------------------------------------------------------------------

Context ctxRobot ip [ host="localhost" port=8020]
Context ctxConsole ip [ host="localhost" port=8010]

QActor console context ctxConsole{
	
// ------------------------------------------------------------------
//			NORMAL PLANS
// ------------------------------------------------------------------
	
	Plan init normal
		solve consult("expConsoleTheory.pl") time(0) onFailSwitchTo  consultPrologFailure ;
		solve consult("consoleTheory.pl") time(0) onFailSwitchTo  consultPrologFailure ;
		
 		println("++++++++++++++++++ console(starts) ++++++++++++++++++");
 		switchToPlan waitGUICommand
 		
 		
 	Plan waitGUICommand
		println("++++++++++++++++++ WAIT COMMAND ++++++++++++++++++");
		
		sense time(999999999) local_gui_command -> continue;
		//[ ?? tout(X,Y) ] switchToPlan handleTimeout;
		
		printCurrentEvent;
		memoCurrentEvent;
		
		onEvent local_gui_command : local_gui_command (explore) -> switchToPlan exploration;
		
 		onEvent local_gui_command : local_gui_command (explore(FILENAME, START, BOUNDS, MODE)) ->
 																		 switchToPlan explorationDebug;
 		
 		onEvent local_gui_command : local_gui_command (clear) -> switchToPlan clearGUI;
		
		repeatPlan 0
		
	Plan loadMap resumeLastPlan
		[?? msg(local_gui_command, "event", SENDER, none, local_gui_command (loadmap(PATH)), MSGNUM)]
			 solve loadMap(PATH) time(210000000) onFailSwitchTo loadMapFailure;
				
		println("++++++++++++++++++ MAP LOADED ++++++++++++++++++")
	
// EXPLORATION ----------------------------------------------------------------------------
	
	Plan exploration
		println("++++++++++++++++++ EXPLORATION ++++++++++++++++++");
		
		solve showClearMap time(60000) onFailSwitchTo  explorationFailure;	
		forward robot -m explore : explore;
	
		switchToPlan waitEndOfExploration
			
	Plan explorationDebug
		println("++++++++++++++++++ EXPLORATION DEBUG ++++++++++++++++++");
					
		[!? msg(local_gui_command, "event", SENDER, none, local_gui_command (explore(FILENAME,START,BOUNDS,MODE)), MSGNUM)]
			solve showClearMap(BOUNDS) time(60000) onFailSwitchTo  explorationFailure;	
		
		println("mappa pulita");
			
		[!? msg(local_gui_command, "event", SENDER, none, local_gui_command (explore(FILENAME,START,BOUNDS, debug)), MSGNUM)]
			 forward robot -m exploredebug : exploredebug(START,BOUNDS);		
		
		[?? msg(local_gui_command, "event", SENDER, none, local_gui_command (explore(FILENAME,START,BOUNDS, simulated)), MSGNUM)]
			 forward robot -m explorefile : explorefile(START,FILENAME);		 
				
		switchToPlan waitEndOfExploration

	
			
	Plan waitEndOfExploration resumeLastPlan
		sense time(999999999) local_gui_command, expdata, end -> continue, continue, continue;
		
		printCurrentEvent;
		
		onEvent expdata : expdata(POS , STATE) ->
			solve updateMap(POS , STATE) time(210000000) onFailSwitchTo explorationFailure;
			
		onEvent local_gui_command : local_gui_command(abort) ->	switchToPlan abortCommand;
		
		onEvent end : end -> switchToPlan endOfExploration;			
			
		repeatPlan 0
			
			
	Plan endOfExploration
		println("Exploration ENDED");
		println("Please Save the map, or clear and repeat");
		
		switchToPlan waitGUICommand
			
// COMMON -----------------------------------------------------------------------------	
	
	Plan abortCommand
		emit abort : abort;
		println("++++++++++++++++++ COMMAND ABORTED ++++++++++++++++++");
		switchToPlan waitGUICommand	
		
	Plan clearGUI resumeLastPlan
		solve clearGUI time(10000);
		println("map cleared")

// ------------------------------------------------------------------
//	PROLOG FAILURE ERROR HANDLERS
// ------------------------------------------------------------------
		
	Plan handleTimeout
 		println("timeout!! GOODBYE")
 	
 	Plan explorationFailure            
		println("Explore FAILURE" ) 
 	
 	Plan loadMapFailure           
		println("Load Map FAILURE" ) 
		 
 	Plan consultPrologFailure            
		println("The consult is gone wrong, maybe there are errors in the prolog file" ) 
 		
 	Plan generalPrologFailure            
		println("Prolog goal FAILURE" ) 	
	
}


QActor robot context ctxRobot{
 	Plan init normal		
		println( "just a placeholder" )
	}
