/* Generated by AN DISI Unibo */ 
package it.unibo.robot;


import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import alice.tuprolog.Term;
import it.unibo.contactEvent.interfaces.IEventItem;
import it.unibo.domain.model.implementation.State;
import it.unibo.iot.configurator.Configurator;
import it.unibo.iot.models.sensorData.SensorType;
import it.unibo.iot.models.sensorData.distance.IDistanceSensorData;
import it.unibo.iot.sensors.ISensor;
import it.unibo.iot.sensors.distanceSensor.DistanceSensor;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.model.map.Map;
import it.unibo.planning.enums.Direction;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.akka.QActorPlanUtils;
import it.unibo.robot.navutils.NavigationController;
import it.unibo.robot.utility.Engine;
import it.unibo.robot.utility.FileEngine;
import it.unibo.robot.utility.QActorPlanUtilsDebug;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.QActorUtils;

//
/**
 * @author Dario
 *
 */
public class Robot extends AbstractRobot { 
	
	private int defaultSpeed, defaultTime;
	private int defaultTurnSpeed, defaultTurnTime;
	
	private ArrayList<State> path;
	
	private Engine engine = null;
	private String currentFilename;	
	
	private NavigationController controller;
	
	//private HashMap<Integer, Direction> spinMap;
	
//{{ CONSTRUCTOR
	
	public Robot(String actorId, QActorContext myCtx, IOutputEnvView outEnvView ) throws Exception
	{
		super(actorId,myCtx,outEnvView ,it.unibo.qactors.QActorUtils.robotBase );
		
		QActorPlanUtils myUtils = new QActorPlanUtilsDebug(this, actionUtils, outEnvView);
		
		this.currentFilename = "";
		
		this.planUtils = myUtils;
	}

//}}

	
//{{ INITIALIZATION - COMMON ******************************************************
	
	/**
	 * To config the speed and duration of the movements.
	 * Those params are defined in the prolog files navRobotTheory.pl and expRobotTheory.pl.
	 * You can change that without recompiling all the project. 
	 * 
	 * @param defSpeed		default forward/backward speed
	 * @param defTime		default forward/backward time
	 * @param defTurnSpeed	default rotate speed (different between exp and nav)
	 * @param defTurnTime	default rotate time (different between exp and nav)
	 */
	public void initialConfigRobot(int defSpeed, int defTime, int defTurnSpeed, int defTurnTime)
	{
		this.defaultSpeed = defSpeed;
		this.defaultTime = defTime;
		this.defaultTurnSpeed = defTurnSpeed;
		this.defaultTurnTime = defTurnTime;
	}
//}}
	
	
//{{ INITIALIZATION - NAVIGATION **************************************************
		
	/** 
	 * Redefined in order to add my personal events
	 * 
	 * @see it.unibo.robot.AbstractRobot#addSensorObservers()
	 */
	@Override
	protected void addSensorObservers(){
		
		Set<ISensor<?>> sensors = Configurator.getInstance().getSensors(SensorType.DISTANCE);
		
		for(ISensor<?> sense : sensors)
		{
			DistanceSensor s = (DistanceSensor)sense;
			s.addObserver(new SensorObserver<IDistanceSensorData>(this,outEnvView,s.getPosition().getDefStringRep(), 5));
		}
		
	}
	
	/**
	 * Configure the Engine that manage the dynamically update of the robot position</br>
	 * Robot doesn't need to know the map, it's a stupid executor that simply move on it.
	 * 
	 * @param sx	start X position
	 * @param sy	start Y position
	 */
	public void configEngine(int sx, int sy)	{
		
		System.out.println("Navigation Mode --> ROBOT");
		
		if(engine == null) engine = new Engine(sx, sy, this);
		disableDebugSensing();
		
		if(!engine.getState().getDirection().equals(Direction.NORTH))
		{
			engine.setNorthDirection();
		}
		
		println(engine.getState().toString());
	}

	public void configFileEngine(int sx, int sy, String filename)
	{
		System.out.println("Navigation Mode --> SIMULATED");
		
		if(currentFilename.equals(filename))
			System.out.println("Engine already has the most recent Map");
		else
		{
			Map m = loadMap(filename);
			this.engine = new FileEngine(sx, sy, m, this, false);
			//((FileEngine)engine).setObject(new State(2,2));
			((QActorPlanUtilsDebug)planUtils).setEngine(((FileEngine)engine));
		}		
		
		System.out.println(((FileEngine)engine).getWorldMap().toString());
		
		enableDebugSensing();
		
		if(!engine.getState().getDirection().equals(Direction.NORTH))
		{
			engine.setNorthDirection();
		}
		
		println(engine.getState().toString());
	}
//}}	

	
//{{ NAVIGATION MANAGEMENT ****************************************************
	
	/**
	 * Create a runnable Plan from the representation received from the Console,
	 * then store it in a proper file that can be loaded and executed in every moment.</br>
	 * 
	 * It uses the default speed and duration, defined in the initial config method.</br>
	 * 
	 * <b>WARNING</b>: the default rotation angle is 45Â°;</br>
	 * <b>WARNING</b>: The diagonal movements require more time then the tiled movements.
	 * 
	 * @param plan		prolog list [m1, m2, ...] of movements
	 */
	public void setNavigationPlan(String plan)	{
		
		boolean simulated = (engine instanceof FileEngine);
		
		String speed = ""+defaultSpeed;
		String time = ""+defaultTime;
		String diagoTime = ""+(Math.round(defaultTime*1.414));
		
		plan = plan.split("\\[")[1];
		plan = plan.split("\\]")[0];
		
		println("Preparazione alla navigazione in corso...");
		println(plan);
		println(speed);
		println(time);
		
		controller = new NavigationController(plan.split(","), engine);			
	}	
	
	
	public void navigate(){		
		controller.navigate();		
	}
	

	/**
	 * Sends an event to the RobotGUIManager to update the position during the navigation
	 */
	public void notifyMyPosition(){
		
		State s = engine.getState();
		
		String payload = "position("+s.getX() + "," + s.getY() + ")," +
						s.getDirection().toString().toLowerCase();
		
		emit("show", "show(" + payload + ")");
	}
	
	
	public synchronized void updateSimulationWorld(String msg){
		
		System.out.println("Update the World Map");
		
		if(!msg.contains("updateSimulation"))
			return;
		
		msg = msg.replace('(', ' ');
		msg = msg.replace(')', ' ');
		msg = msg.replace(',', ' ');
		msg = msg.trim();
		
		String[] params = msg.split(" ");
		
		((FileEngine)engine).setObject(
				new State(Integer.parseInt(params[3]), Integer.parseInt(params[2])));
		
		System.out.println(((FileEngine)engine).getWorldMap().toString());
	}

//}}	

	
//{{ UTILITIES ---------------------------------------------------------------
	
	private Map loadMap(String filename){
		
		this.currentFilename = filename;
		
		Map m = null;
		
		List<String> data = new ArrayList<String>();						
		try
		{
			InputStream fs = new FileInputStream(filename);
			InputStreamReader inpsr = new InputStreamReader(fs);
			BufferedReader br       = new BufferedReader(inpsr);
			Iterator<String> lsit   = br.lines().iterator();

			while(lsit.hasNext())
			{
				data.add(lsit.next());
			}
			br.close();
			
		} catch (Exception e)
		{
			System.out.println("QActor  ERROR " + e.getMessage());
		}
		
		for(int i=0; i<data.size(); i++)
		{
			if(i == 0)
			{
				m = Map.createMapFromPrologRep(data.get(i));
			}
			else
			{
				String s[] = data.get(i).split(" ");
				m.addElementFromString(s[1]);
			}
		}
		
		return m;
	}
	
	public void consultFromFile(String filename)
	{
		System.out.println("loading...");
		QActorUtils.consultFromFile(pengine, filename);
	}		
	
	
	@Override
	public AsynchActionResult solveGoalReactive(String goal, int time, String evList, String planList){
		
		System.out.println("solve ---> "+goal);
		
		super.solveGoal(goal);
		return new AsynchActionResult(null, time+1, true, true, "", null);		
	}
	
//}}	
	
	
//{{ SYSTEM INTERACTION *****************************************************


	public void enableDebugSensing()
	{
		((QActorPlanUtilsDebug) planUtils).enableFileSensingMode();
	}
	
	public void disableDebugSensing()
	{
		((QActorPlanUtilsDebug) planUtils).disableFileSensingMode();
	}

	
	
	/**
	 * Sense events
	 * 
	 * @param timeout	Sensing timeout
	 * @param event		Event name
	 * @param plan		What to do when the event come
	 * 
	 * @return			The first Event that is detected or null
	 */
	public IEventItem senseEvent(int timeout, String event, String plan){
		
		event = event.replace('[', ' ');
		event = event.replace(']', ' ');
		plan = plan.replace('[', ' ');
		plan = plan.replace(']', ' ');
		event = event.trim();
		plan = plan.trim();
		
		setCurrentEvent(null);
		try
		{			
			AsynchActionResult aar1 =
					planUtils.senseEvents( timeout , event, plan, "" , "",ActionExecMode.synch );
			
			if( ! aar.getGoon() || aar.getTimeRemained() <= 0 )
			{
    			println("WARNING: sense timeout");
    			addRule("tout(senseevent,"+getName()+")");
    		}
			
			return currentEvent;
		}
		catch (Exception e) {
			
			e.printStackTrace();
		}
		
		return null;
	    		
	}
	
	
	/**
	 * Send a Message to a well defined actor
	 * 
	 * @param msgName		the message ID
	 * @param paramsList	prolog params list
	 * @param destActor		destination
	 */
	public void sendDispatch(String msgName, String paramsList, String destActor){
		String payload = msgName+"(";
		
		paramsList = paramsList.replace("[", "");
		paramsList = paramsList.replace("]", "");
		payload += paramsList;
		
		payload += ")";
		
		try
		{
			sendMsg(msgName, destActor, QActorContext.dispatch, payload );
		} catch (Exception e)
		{
			e.printStackTrace();
		}
		
		
	}
	
	
	/**
	 * Implements a Message switch.</br>
	 * Messages are in the format <i>msgID : msgID(Payload)</i><br>
	 * When a defined combo of msgID - msgPayload is received, the relative PrologGoal is solved in the defined time.
	 * 
	 * @param timeout			receive Message timeout
	 * @param msgList			list of msg IDs
	 * @param msgPayloadList	list of msg Payloads
	 * @param goalList			list of goals to solve when the relative message is received
	 * @param solveTime			prolog solve timeout
	 */
	public void receiveMessageAndSolve(int timeout,
										String msgList,
										String msgPayloadList,
										String goalList,
										int solveTime){
		
		try
		{
			AsynchActionResult aar = planUtils.receiveAMsg(mysupport, timeout, "" , "" ); 	//could block
			
			if( aar.getInterrupted() )
			{
			
				curPlanInExec   = "playTheGame";
				
				if( ! aar.getGoon() ) return;
			} 			
			if( ! aar.getGoon() )
			{
				System.out.println("WARNING: receiveMsg in " + getName() + " TOUT " + aar.getTimeRemained() + "/" +  timeout);
				addRule("tout(receive,"+getName()+")");
			}
			
			printCurrentMessage(false);
			
			msgList = msgList.replace("[", "");
			msgList = msgList.replace("]", "");
			
			msgPayloadList = msgPayloadList.replace("[", "");
			msgPayloadList = msgPayloadList.replace("]", "");
			
			goalList = goalList.replace("[", "");
			goalList = goalList.replace("]", "");
			
			String[] msg = msgList.split(",");
			String[] msgPayload = msgPayloadList.split(",");
			String[] goal = goalList.split(",");
			
			for(int i=0; i<msg.length; i++)
			{
				if(currentMessage.msgId().equals(msg[i]))
				{
					String parg = goal[i];
					parg = updateVars(Term.createTerm(msgPayload[i]), Term.createTerm(msgPayload[i]), 
		  					Term.createTerm(currentMessage.msgContent()), parg);
					
					if( parg != null ) {
    					aar = solveGoalReactive( parg , solveTime, "" , "");
    								
    					if( aar.getResult().equals("failure")){
    						if( ! planUtils.switchToPlan("prologFailure").getGoon() ) return;
    					}else if( ! aar.getGoon() ) return;
    				}
				}
			}
			
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}		
	}
	
	public void switchPlan(String plan)
	{		
		try 
		{
			planUtils.switchToPlan(plan);
		}
		catch (Exception e) 
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
//}}
	
	
//{{ GUI INTERACTION **************************************************
	
		public void showPathOnGui()
		{
			for(State s : path)
			{
				System.out.println(s.toString());
			}
		}
	//}}
	
	
//{{ REAL ROBOT CONTROLS *****************************************************
	
	/**
	 * Move Real robot forward at default speed and for default duration
	 */
	public void moveForward()
	{
		try
		{
			super.execute("forward", defaultSpeed, 0, defaultTime, "", "");
		}
		catch (Exception e) 
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	/**
	 * Move Real robot backward at default speed and for default duration
	 */
	public void moveBackward()
	{
		try
		{
			super.execute("backward", defaultSpeed, 0, defaultTime, "", "");
		}
		catch (Exception e) 
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	/**
	 * Turn Real robot left at default speed and for default duration
	 */
	public void turnLeft()
	{
		try
		{
			super.execute("left", defaultTurnSpeed, 0, defaultTurnTime, "", "");
		}
		catch (Exception e) 
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	/**
	 * Turn Real robot right at default speed and for default duration
	 */
	public void turnRight()
	{
		try
		{
			super.execute("right", defaultTurnSpeed, 0, defaultTurnTime, "", "");
		}
		catch (Exception e) 
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
//}}
}
